%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1403.m00.i103.n005.S.c10.166712030 Web statistics and analytics.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Алексей Егоров
%%CreationDate: 3/6/2014
%%BoundingBox: 0 0 500 400
%%HiResBoundingBox: 0 0 500 400
%%CropBox: 0 0 500 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 28660 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C453C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C36363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C3C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C36363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C3C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C36363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C3C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C3636
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C3C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C36363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C3C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C143C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%36363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C136084A95A3C366036
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C3C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%84FFFFFF608BFFFF603C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C36363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C366084FFA8FFA8FD05FF843C143C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C3C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363CA8FFA8FD09FFAF60363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C3660363C363C363C363C
%365A3536355A3536355A363C363C363C363C363C363C363C36363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C146084FFA8FFA8FFFFFFA8FD05FF6036363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C3660366036
%3C363C363C36362E592E59525952592E59363C363C363C363C363C363C36
%3C3C363C363C363C363C363C3661603C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C84FD0BFFAF8B8460363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C3661603C3C61
%363C363C363C3584FD07FFAF353C363C363C363C363C363C363C36363C36
%3C363C363C363C36603660363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C3660A8FFA8FFA8FFA8FFA8FFA884133C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%606060363C363C363C36357DFD07FFA859363C363C363C363C363C363C36
%3C3C363C363C363C363C363C60603C61363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C36616060366060603660
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C3660363C363C363C363D3584FD04FFCAFFFFA82F3C363C363C36
%3C363C363C363C36363C363C363C363C363C363C3660363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C133C
%1436133C1436133C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C133C363C363C363C14357DFFCFAFA1B59AFF
%A835133C363C363C363C363C363C363C3C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363D35
%84FFAF5BA8B5B5BCA9353C363C363C363C363C363C363C36363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C36357DAF365B84BC93C3A835363C363C363C363C363C363C
%363C3C363C363C363C363C363C363C363C363C363C363C363C3660353635
%603536356035363560353635603536353C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C35A8A95B5AFD0485FF353C363C363C
%363C363C363C363C36363C363C363C363C363C363C363C363C363C363C36
%3C363527282728272827282728272827282728272827522F3C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C36357DAF365B365B36
%A9A835363C363C363C363C363C363C363C3C363C363C363C363C363C363C
%363C363C363C363C363D2F7DA8A884A9848584A9848584A9848584A98585
%52593C3C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%3584FF855B615B85FFFF353C363C363C363C363C363C363C36363C363C36
%3C363C363C363C363C363C363C363C363C363552FD12FF522F3C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C36357DFFAF855A85
%A9FFA859363C363C363C363C363C363C363C3C363C363C363C363C363C36
%3C363C363C363C363C363D357DFFFF7FAFFD0EFF5259363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363D3584FD07FFA92F3C363C
%363C363C363C363C363C36363C363C363C363C363C363C363C363C363C36
%3C363C143552FF845B84FFAFFFCABC9AFFFFFFA8FFFFFFA8522F3C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C14357DFD07FFA8
%35143C363C363C363C363C363C363C3C363C363C363C363C363C363C363C
%363C363C363C363D357DFFAF5BAFFFCECEFFB5BCFD04FFAFAFFFFF52593C
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363D357EA9
%FFA9FFA8FFFFA82F3C3C3C363C363C363C363C363C36363C363C363C363C
%363C363C363C363C363C363C363C363552FF845B85FF9EC7CABC94FFCACF
%CFA936AFCF522F3C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C365A2E592E5959592E592E59353C363C363C363C363C363C363C
%3C363C363C363C363C363C363C363C363C363C363C363C2F7DFFAF36AFFF
%C6C6FFB5BCFFC8C0FF855BA9FF52593C3C363C363C363C363C363C363C36
%3C363C363C363C363C363C5AFFFFFFAFFFFFFFAFFFFFFFAFFD04FFA8363C
%363C363C363C363C363C363C5A592E532E7D53532E537D84133C363C363C
%363C363C363C36363C363C363C363C363C363C363C363C363C363C363C36
%3552FF855B84FF9EC7A8BC9AFF9FC6CF8536AFCF522F3C363C363C363C36
%3C363C363C363C363C363C363C363C363C1460CAFFFFFFCAFFFFFFCAFFFF
%FFCAFFFFFF8484353C363C363C363C363C363C36A92E3635361336353613
%3C8459143C363C363C363C363C363C3C363C363C363C363C363C363C363C
%363C363C363C363D2F7DFFAF5BAFFFC6C7FFB6BCFFC8C0FF8561A9FF5259
%3C3C363C363C363C363C363C363C363C363C363C363C363C363C60FD10FF
%AF8484363C363C363C363C363C3661A8363C3C363D3C3C363D368584363C
%3C363C363C363C363C36363C363C363C363C363C363C363C363C363C363C
%363C363552FFA95B85FFC0C7A8BC9AFFA5C6CF8536AFFF522F3C363C363C
%363C363C363C363C363C363C363C363C363C363C1460CAFFA8FFA8FFA8FF
%A8FFA8FF8485A8A984FFCF60143C363C363C363C363C847E133C363C363C
%363C363C14A9593C363C363C363C363C363C3C363C363C363C363C363C36
%3C363C363C363C363C363D2F7DFFAF5BAFFFC7C7FFBCC3FFC8C6FFA961A9
%FF5259363C363C363C363C363C363C363C363C363C363C363C363C363C60
%FD05FFA8FFFFFFCFFFFFAFA8FFAF85A9FF603C363C363C363C363C36AF59
%3C363C363C363C363C363C3CA8353C363C363C363C363C36363C363C363C
%363C363C363C363C363C363C363C3636143552A87DA87EA87DA87EA87DA8
%7DA87DA87EA87D522F3C133C363C363C363C363C363C363C363C363C363C
%363C363C1360CFFFA8FFA8FFA8AFA8FFCAFFA8FFA8FFA8FFCA60143C363C
%363C363C363CA835363C363C363C363C363C363C8484133C363C363C363C
%363C3C363C363C363C363C363C363C363C363C363C368584AF84A87DA87E
%A87DA87EA87DA87EA87EA87EA87DA8A2A884AF603C363C363C363C363C36
%3C363C363C363C363C363C363C60FD07FFA9A9A9FF85AFFD06FF603C363C
%363C363C363C60A8353C363C363C363C363C363C363CA85A363C363C363C
%363C36363C363C363C363C363C363C363C363C363C363C5ACAA8CAA8A8A8
%FFA8A8A8A9A8A8A8A9FD07A8AFA8A8A860363C363C363C363C363C363C36
%3C363C363C363C363C1460FFFFA8FFFFFFA8AFFFFFA8A9A9FFA8FFFFFFCA
%60143C363C363C363C148B5936363C363C363C363C363C363C14607D3614
%3C363C363C363C3C363C363C363C363C363C363C363C363C363C363C3660
%363C84FF353C36603660366036603684A85A36603660363C363C363C363C
%363C363C363C363C363C363C363C363C363C5AFD07FFA9FD0BFF5A3C363C
%363C363C363CA859363C363C363C363C363C363C363C368B7E61363C363C
%363C36363C363C363C363C363C363C363C363C363C363C363C143684FF2F
%36143C363C143C363C143C14AF7D36363C143C363C363C363C363C363C36
%3C363C363C363C363C363C363C1460CAFFA8AFA8FF7EA9A8FFA8FFA8FFA8
%FFA8FFCA60143C363C363C363636A80D3C363C363C363C363C363C363C36
%3C84FFCFA8353C363C363C3C363C363C363C363C363C363C363C363C363C
%363C363CAFFF353C363C363C363C363C363C363C36FF7E36363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C60FFFFFF85A9A9FF
%A9FD0BFF5A3C363C363C363C148B7D36363C363C363C363C363C363C363C
%3CFF8484FF7E143D363C36363C363C363C363C363C363C363C363C363C36
%3C143CAFA82F3C363C363C363C363C363C363C363636FF5936363C363C36
%3C363C363C363C363C363C363C363C363C363C363C1460CAFFA8AFCFFFFF
%FFA8FFFFFFA8FFFFFFA8FFFF60143C363C363C363C8459143C363C363C36
%3C363C363C363C363CFFA884FF5936363C363C3C363C363C363C363C363C
%363C363C363C363C3660AFA8353C363C363C363C363C363C363C363C363C
%60FF353C363C363C363C363C363C363C363C363C363C363C363C363C363C
%60FFA985FD10FF603C363C363C363C3CAF2F3D363C363C363C363C363C36
%3C363C3685FFFF7D363C3C363C36363C363C363C363C363C363C143C353C
%36361460AFA80D3C363C363C363C363C363C363C363C363C363684A8133C
%363C363C143C363C363C363C363C363C363C363C363C363C1360CFFFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFCA60143C363C363C13857D35363C363C
%363C363C363C363C363C363C133C3536143C363C363C3C363C363C363C36
%3C363D36837BC79EC67B83AF84133D3C3C363C363C363C363C363C363C36
%3C363C363CAFA8133D363C363C363C363C363C363C363C363C363C363C36
%3C363C60FD13FF603C363C363C363C8584133D363C363C363C363C363C36
%3C363C363C363C363C363C363C36363C363C363C363C363C35A5C0C6C7C8
%C7C7C0C72E36363C363C363C363C363C363C363C363C363C363C143CA984
%133C36354B532E5228522E5228522E5228522835363C363660AF59845984
%7D8459847D8459847D8459847E845960363C363C363C36AF2F3C363C363C
%363C363C363C363C363C363C363C363C363C363C363C3C363C363C363C36
%3D35C6C0CEFD05FFCFC0C6583C363C363C363C363C363C363C363C363C36
%3C363C1461FF5A143C84FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF353C363C60
%FF59361436133C1436133C1436133C1436133C8459143C363C363C3661A8
%353C3C363C363C363C363C363C363C363C363C363C363C363C363C36363C
%363C363C363C35A5C0CFAFFFFF7EA8FFFFFFC0C02E3C363C363C363C363C
%363C363C363C363C363C363C1361A8351385FD0EFFA85A363636FF593536
%3C363C363C363C363C363C363C363C13618435363C363C363C847E133C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C3C363C363C
%363C3683C0CFFD04FF7DFD04FFCFC67B143D363C363C363C363C363C363C
%363C363C363C363C36AFA83685FD0FFF363C3CFF7D36363C363C363C363C
%363C363C363C363C363C36AF593C3C3C363C36AF593C363C363C363C3661
%6060363C363C363C363C363C363C363C363C36363C363C363C363C9EC7FD
%05FF7DA8FD04FFC89E35363C363C363C363C363C363C363C363C363C363C
%363C14AF7D84FD04FFCAC8A5FD07FFA85A36FF7D35363C363C363C363C36
%3C363C363C363C363C363C3CA8353C363C1460A835363C363C363C366036
%603660363C363C363C363C363C363C363C363C3C363C363C363D35C6C8FD
%05FF53AFFD04FFC9C62E3C363C363C363C363C363C363C363C363C363C36
%3C363C36AFA8FFFFFFC8C6C0C7CABCC3FD05FF35FF8435363C363C363C36
%3C363C363C363C363C363C363C363C8484133C363C60A8133C363C363C36
%60603C36613C3C363C363C363C363C363C363C363C36363C363C363C145F
%9EC9AFFFFFFF7D84527D527DA9CF9E58143C363C363C363C363C363C363C
%363C363C363C363C363C36FFCAFFC9C09EC6A5CA93B593CAAFFFA8A87D35
%363C363C363C363C363C363C363C363C363C145928522852525228522E52
%28525252353C363C3660363C3660363C363C363C363C363C363C363C363C
%3C363C363C363D59C6C9FD04FFCA7DA9A8FFA9FFC9C6513C363C363C363C
%363C363C363C363C363C363C363C363C363C84FFFFC7C0C6C9FFCABCB5B6
%B5FFFFFF7D35363C363C363C363C363C363C363C363C363C363C60FD0DFF
%843C3C3C363C3C616061363C363C363C363C363C363C363C363C36363C36
%3C363C363C9EC8FFFFFFCBBCFD06FFC99E34363C363C363C363C363C363C
%363C363C363C363C363C363C1485FFCFC0C0A6FD04FFC3939A7D847E8459
%845936353C363C363C363C363C363C363C363C1484FD0AFFCAFFFFA8133C
%363C363C363C363C363C363C363C363C363C363C363C363C3C363C363C36
%3C36A5C6FFFFFFC3CAFD06FFC79E0D3D363C363C363C363C363C363C363C
%363C363C363C363C363C84FFC9C6C0CEFD04FFFD04847EFD0484A9848435
%3C363C363C363C363C363C363C363C60FFFFCF7DFD05FFCAC2FFFFA83636
%3C363C363C363C363C363C363C363C363C363C363C363C36363C363C363C
%363C35C6C8FFA2C3FFFFA8FFFFFFA6C65136363C363C363C363C363C363C
%363C363C363C363C363C363C1385FFCF9FC7C8FFFFAF7D8484592F594B76
%6F76598484845936363C363C363C363C363C363C1484CAFFC87C85FFFFFF
%AFC398CFFFA8133C363C363C363C363C363C363C363C363C363C363C363C
%363C3C363C363C363C363D7CC6C8FD07FFC9C67A36363C363C363C363C36
%3C363C363C363C363C363C363C363C363C84FFFFFFC3C3C3FF84A959597D
%FFFFBCB5BCB5C3AFA884A95936363C363C363C363C363C363C60FFFFC77C
%85FD04FFBCC1C8FFA836363C363C363C363C363C363C363C363C363C363C
%363C363C36363C363C363C363C143C7BC0C0CECAFFCACEC7C67435363C36
%3C363C363C363C363C363C363C363C363C363C363C363C1385FFFFCABCB0
%9459A8592FA8FFFFFF9AB593B59AFFFFA859A85936363C363C363C363C36
%3C1484FFCFC07C37FFFFFFA1B698C7FFA8353C363C363C363C363C363C36
%3C363C363C363C363C363C363C3C363C363C363C363C363D58C6C0C6C6C6
%C0C65736363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C84FFFFFFCABC7DAF5959FD05FFCABCBCB5C3FFFFA83684A8593C363C
%363C363C363C363C60FFC8C67C5B85FFFFBC93C1C0CF843C363C363C363C
%363C363C363C363C363C363C363C363C363C36363C363C363C363C363C14
%3C84C9578257583536363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C1484FD04FF7D84592FA8FFFFFFAFFFA1CAA1C3A1FFFFA8
%136084842F3C363C363C363C363C1384FFC8C0A75B85AFFF9ABD9FC7C8A8
%133C363C363C363C363C363C363C363C363C363C363C363C363C3C363C36
%3C363C363C363C36AFA8363C3D363D3C3C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C84FD04FF8584597DFD05FFC3CABCC3
%CAFFFFFFA8363684A859353D363C363C363C363C60FD0DFFA83C3C3C363C
%363C363C363C363C363C363C363C363C363C363C36363C363C363C363C36
%3C363CFF7E133C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C1485FFFFFFA97D8428BCA1CACAC39AC3A1CA9AC3FF
%FFFFA8133C36A85935363C363C363C363C1484FD0DFFA8133C363C363C36
%3C363C363C363C363C363C363C363C363C363C3C363C363C363C363C363C
%3CFF5936363C363C363C363C363C363C3660606036613C3C363C363C363C
%363C363C363C363C84FFFFFFA8845976B5B593BCB5BCC3C3C3CACAFFFFFF
%8436363C84842F3C363C363C363C363C60FFA9AFA9AFA9AFA9AFA9AFA9FF
%A836363C363C363C363C363C363C363C363C363C363C363C363C36363C36
%3C363C363C363C1484CA35363C363C363C363C363C363C363C3660366036
%60363C133C363C363C363C363C363C1385FFFFFFA884596FBC93B593BC93
%BCA1BDA8FFA8FFFFA8133C36847E35133C363C363C363C1484CA855A855A
%857E855A857E8584A8133C363C363C363C363C363C363C363C363C363C36
%3C363C363C3C363C363C363C363C363C84FF353C363C363C363C363C363C
%366036616061606160603661363C363C363C363C363C363C60A884A87EA8
%52B6B5BCB5BCB5BCB5CACAFD05FFA8363C3C60A92F3C363C363C363C363C
%60FD0DFFA836363C363C363C363C363C363C363C363C363C363C363C363C
%36363C363C363C363C363C36AF7D35363C363C363C363C363C363C606036
%60363C36603C60363C363C363C363C363C363C363C1336136084599ABC93
%B593BC9AC3A8FD06FFA8133C36608459133C363C363C363C1484CB855A5B
%5A855A5B5A855A5B85A8353C363C363C363C363C363C363C363C363C363C
%363C363C363C3C363C363C363C363C363CFF84133C363C363C363C363C36
%3C36616060363C363C36616060363C363C363C363C363C363C363C363C5A
%A859FFFFFFCACACAFD09FFA836363C60A82E3C363C363C363C363C60FFA9
%FFAFFFA9FFAFFFA9FFA9FF843C363C363C363C363C363C363C363C363C36
%3C363C363C363C36363C363C363C363C36365AFF2F36363C363C363C363C
%363C363C3660363C363C363C3660363C363C363C363C363C363C363C363C
%365A7E59A8FFAFFFFFFFAFFFFFFFA8FD04FFA8133C36847E2F133C363C36
%3C363C1384FD0DFFA8133C363C363C363C363C363C363C363C363C363C36
%3C363C363C3C363C363C363C363C84FFFF5A363C363C363C363C363C363C
%36616060363C363C3661603C363C363C363C363C363C363C363C363C36A8
%7EA8FD0EFFA836366084840C3D363C363C363C363C60A8A8AFA8A8A8AFA8
%A8A8AFA8AF7D3C3C3C363C363C363C363C363C363C363C363C363C363C36
%3C36363C363C363C363C60FF7DFFA835363C363C363C363C363C363C5A60
%363C363C363C3660603C363C363C363C363C363C363C363C363659A859FD
%0EFFA8133C5AA82F35363C363C363C363C363C3536133635361336353613
%363536363C363C363C363C363C363C363C363C363C363C363C363C363C3C
%363C363C363C148BFF5AA9FF353C363C363C363C363C363C36603C616060
%366160606061363C363C363C363C363C363C363C363C3660848484FFA8FF
%A8AFA8FFA8AFA8FFA8FF7D363CA87E2F363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C36363C363C363C363C36FFFFFF5936363C363C363C363C36
%3C363C363C366036603660363C363C363C363C363C363C363C363C363C36
%3C365A84590C2F0C2F0C2F0C2F0C2F0C2F0C2F138484590C3C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C3C363C363C363C363C3C84353C3C3C
%363C363C363C363C363C363C366160613C616060363C363C363C363C363C
%363C363C363C363C363C36848484363C363C363C363C363C363C3684A87E
%0C3C3C3C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C36363C363C363C36
%3C363C143C363C363C363C363C363C363C363C363C3660363C3660363C36
%3C363C363C363C363C363C363C363C363C363C35848484353C363C363C36
%3C143C3684847E0C36363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C3C3C2F84
%84A85A60363C363C366060A984590C363C3C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C36363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C143C2F592F597DA8FD04847E84848459530C36363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C3C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C3660FD04590C3635847E847E847D592F35353C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C36363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C365A538459590C36363C13362F350D
%350D36363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C3660598484A85935
%363C363C363D363C363D3C3C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C36363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C2F84848459530D3C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C3C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C358484A87E592E3C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C36363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C35597EA87E592E36363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C3C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C365A84A8847E2E35
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C36363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%5959A8845A2E35363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C133C363C143C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C3C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C3C5A59A984842F35363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C3661363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C36363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C365A53848484532E133C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C84FFA88514
%60A885143C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C3C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C3660538484845959353C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C36FFFFFFA88BAFFFFF8B3C3C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C36363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C143C2F
%7E8484592F0C3C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C133C84FFA8FFA8FFCFFD04FFAF3636363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C3C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363D357E84AF7E592E3C3C3C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C60FD0DFF3C3C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C36363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C355984847E5A2E35363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C84FFA8FFA8FFCAFD08FF60143C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C3C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C365A7EA8847E2E353C3C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C36AFFD04FFCAFFFFFFCFFFFFAF366136
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C36363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C3584847E2F2F143C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C36A884A984A984A9
%84A984A93636133C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C3C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C3684592F363D363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C36363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%3635133C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C3C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C3C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C36363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C3C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C36363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C363C363C363C363C363C363C363C363C363C363C
%363C363C363C363C363C3C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C363C363C363C363C363C363C36
%3C363C363C363C363C363C363C363C363C361436133C1436133C1436133C
%1436133C1436133C1436133C1436133C1436133C1436133C1436133C1436
%133C1436133C1436133C1436133C1436133C1436133C1436133C1436133C
%1436133C1436133C1436133C1436133C1436133C1436133C1436133C1436
%133C1436133C1436133C1436133C1436133C1436133C1436133C8B848B84
%8B848B848B848B848B848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B848B848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B848B848B848B848B848B848B848B848B848B848B848B84
%8B848B848B848B848B848B848B848B848B848B848B848B848B848B848B84
%8B848B84FD7FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">РџРµС‡Р°С‚СЊ</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-03-06T16:19:16+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-03-06T16:19:16+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-03-06T16:19:16+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8ANs6d8zdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdiraqzMFUFmY0AG5JOBIFo290LWLGFZru0khibYOw2qex8D88rhmhI0C5&#xA;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&#xA;/lps/wDg5f8Aqlj/AChDuP4+K/6H8/fD5n9T/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:4E014F5802A5E311BF11ED9262E1BBFA</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:4E014F5802A5E311BF11ED9262E1BBFA</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4A014F5802A5E311BF11ED9262E1BBFA</stRef:instanceID>
            <stRef:documentID>xmp.did:4A014F5802A5E311BF11ED9262E1BBFA</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4A014F5802A5E311BF11ED9262E1BBFA</stEvt:instanceID>
                  <stEvt:when>2014-03-06T14:14:39+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4E014F5802A5E311BF11ED9262E1BBFA</stEvt:instanceID>
                  <stEvt:when>2014-03-06T16:19:16+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=245 G=181 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>245</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=164 G=199 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>164</xmpG:red>
                           <xmpG:green>199</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=92 G=195 B=214</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>92</xmpG:red>
                           <xmpG:green>195</xmpG:green>
                           <xmpG:blue>214</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=90 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=163 G=189 B=194</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>163</xmpG:red>
                           <xmpG:green>189</xmpG:green>
                           <xmpG:blue>194</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=85 G=124 B=140</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>85</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>140</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=64 G=93 B=105</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>64</xmpG:red>
                           <xmpG:green>93</xmpG:green>
                           <xmpG:blue>105</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=119 G=150 B=163</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>119</xmpG:red>
                           <xmpG:green>150</xmpG:green>
                           <xmpG:blue>163</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=176 B=186</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>186</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=88 G=135 B=166</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>135</xmpG:green>
                           <xmpG:blue>166</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=106 G=167 B=241</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>106</xmpG:red>
                           <xmpG:green>167</xmpG:green>
                           <xmpG:blue>241</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=60 G=65 B=74</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>60</xmpG:red>
                           <xmpG:green>65</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=115 G=120 B=129</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>115</xmpG:red>
                           <xmpG:green>120</xmpG:green>
                           <xmpG:blue>129</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=80 G=86 B=98</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>80</xmpG:red>
                           <xmpG:green>86</xmpG:green>
                           <xmpG:blue>98</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=25 G=26 B=39</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>25</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>39</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=227 G=6 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>227</xmpG:red>
                           <xmpG:green>6</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=72 B=75</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>72</xmpG:green>
                           <xmpG:blue>75</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=198 B=198</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>198</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=218 G=225 B=225</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>225</xmpG:green>
                           <xmpG:blue>225</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=226 G=226 B=226</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>226</xmpG:red>
                           <xmpG:green>226</xmpG:green>
                           <xmpG:blue>226</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 G=237 B=237</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>237</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=250 G=250 B=250</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>250</xmpG:red>
                           <xmpG:green>250</xmpG:green>
                           <xmpG:blue>250</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=250 B=250</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>250</xmpG:green>
                           <xmpG:blue>250</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
500 400 li
500 0 li
cp
clp
500 400 mo
0 400 li
0 0 li
500 0 li
500 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.2 .705882 .8 rgb
f
93.3662 202.732 mo
93.3662 219.25 79.9756 232.641 63.4614 232.641 cv
46.9419 232.641 33.5513 219.25 33.5513 202.732 cv
33.5513 186.218 46.9419 172.826 63.4614 172.826 cv
79.9756 172.826 93.3662 186.218 93.3662 202.732 cv
cp
.101961 .352941 .4 rgb
f
136.167 129.276 mo
204.257 214.651 li
206.411 212.252 li
138.322 126.848 li
136.167 129.276 li
cp
f
64.2827 185.585 mo
66.1909 188.692 li
134.919 126.465 li
132.987 123.353 li
64.2827 185.585 li
cp
f
326.599 131.598 mo
325.726 130.773 li
322.799 125.527 li
320.794 126.867 li
322.925 130.688 li
237.452 223.988 li
239.862 226.24 li
324.634 133.744 li
367.712 210.892 li
369.702 209.566 li
326.341 131.879 li
326.599 131.598 li
cp
f
380.673 210.898 mo
383.141 212.131 li
417.898 90.5947 li
415.425 89.3555 li
380.673 210.898 li
cp
f
45.7695 277.29 mo
45.0029 277.708 44.1143 277.81 43.2686 277.556 cv
42.4268 277.313 41.7275 276.755 41.3135 275.985 cv
41.2231 275.838 41.167 275.68 41.1089 275.519 cv
40.5605 274.006 41.21 272.272 42.6313 271.506 cv
43.4023 271.084 44.2861 270.991 45.1206 271.238 cv
45.9653 271.492 46.6655 272.055 47.0889 272.821 cv
47.168 272.972 47.2407 273.119 47.2983 273.279 cv
47.8462 274.795 47.1914 276.517 45.7695 277.29 cv
cp
60.0806 189.816 mo
44.5449 266.14 li
43.0605 266.074 41.582 266.405 40.2427 267.135 cv
36.6855 269.074 35.0522 273.415 36.4268 277.214 cv
36.5669 277.601 36.731 277.986 36.9351 278.356 cv
37.9878 280.298 39.7319 281.706 41.8608 282.339 cv
43.98 282.962 46.2236 282.719 48.1553 281.658 cv
52.0771 279.525 53.7129 274.598 51.4658 270.449 cv
50.876 269.371 50.0688 268.462 49.1118 267.752 cv
65.3086 190.932 li
60.0806 189.816 li
cp
f
473.337 163.047 mo
472.572 163.464 471.685 163.566 470.839 163.313 cv
469.995 163.069 469.297 162.511 468.883 161.742 cv
468.794 161.594 468.735 161.436 468.677 161.276 cv
468.13 159.762 468.779 158.03 470.201 157.263 cv
470.972 156.841 471.855 156.748 472.69 156.995 cv
473.534 157.249 474.234 157.811 474.657 158.578 cv
474.737 158.727 474.81 158.876 474.866 159.036 cv
475.414 160.551 474.76 162.274 473.337 163.047 cv
cp
479.033 156.206 mo
477.971 154.263 476.222 152.84 474.105 152.222 cv
472.332 151.696 470.484 151.787 468.792 152.445 cv
430.63 89.0508 li
429.014 90.541 li
466.897 153.482 li
463.989 155.62 462.745 159.516 463.995 162.97 cv
464.136 163.357 464.299 163.743 464.504 164.113 cv
465.557 166.055 467.3 167.463 469.43 168.096 cv
471.548 168.719 473.792 168.476 475.724 167.415 cv
479.647 165.282 481.281 160.355 479.033 156.206 cv
cp
f
366.244 231.464 mo
366.028 231.464 365.793 231.473 365.567 231.506 cv
364.376 231.691 363.346 232.314 362.633 233.285 cv
361.931 234.237 361.639 235.416 361.815 236.585 cv
362.186 239.007 364.387 240.669 366.9 240.332 cv
368.09 240.153 369.125 239.53 369.829 238.573 cv
370.525 237.621 370.817 236.442 370.639 235.265 cv
370.309 233.09 368.414 231.464 366.244 231.464 cv
cp
366.216 247.132 mo
360.656 247.132 355.986 243.128 355.142 237.602 cv
354.686 234.642 355.425 231.691 357.2 229.278 cv
358.977 226.866 361.582 225.284 364.537 224.844 cv
370.592 223.83 376.403 228.252 377.309 234.237 cv
377.762 237.186 377.039 240.144 375.271 242.569 cv
373.492 244.981 370.876 246.554 367.911 247.005 cv
367.355 247.089 366.788 247.132 366.216 247.132 cv
cp
.984314 .980392 .980392 rgb
f
201.927 214.154 mo
133.838 128.78 li
135.993 126.351 li
204.081 211.755 li
201.927 214.154 li
cp
f
61.9536 185.088 mo
130.658 122.856 li
132.589 125.968 li
63.8618 188.195 li
61.9536 185.088 li
cp
f
237.532 225.743 mo
235.123 223.491 li
321.852 128.82 li
324.27 131.101 li
237.532 225.743 li
cp
f
365.383 210.395 mo
318.463 126.37 li
320.468 125.031 li
367.373 209.068 li
365.383 210.395 li
cp
f
380.811 211.635 mo
378.342 210.4 li
413.096 88.8589 li
415.569 90.0977 li
380.811 211.635 li
cp
f
466.789 156.674 mo
426.685 90.0439 li
428.301 88.5532 li
468.411 155.186 li
466.789 156.674 li
cp
f
344.922 128.89 mo
356.005 128.557 li
344.922 117.814 li
344.922 128.89 li
cp
.854902 .882353 .882353 rgb
f
345.47 117.726 mo
280.704 117.726 li
280.704 179.002 li
356.645 179.002 li
356.645 129.083 li
345.47 117.726 li
cp
.101961 .352941 .4 rgb
f
344.922 117.477 mo
280.709 117.477 li
280.709 177.251 li
356.005 177.251 li
356.005 128.557 li
344.922 117.477 li
cp
.980392 .980392 .980392 rgb
f
350.391 129.52 mo
285.698 129.52 li
285.698 129.257 li
350.391 129.257 li
350.391 129.52 li
cp
.776471 .776471 .776471 rgb
f
350.391 134.496 mo
285.698 134.496 li
285.698 134.227 li
350.391 134.227 li
350.391 134.496 li
cp
f
350.391 139.466 mo
285.698 139.466 li
285.698 139.202 li
350.391 139.202 li
350.391 139.466 li
cp
f
350.391 144.439 mo
285.698 144.439 li
285.698 144.174 li
350.391 144.174 li
350.391 144.439 li
cp
f
350.391 149.414 mo
285.698 149.414 li
285.698 149.152 li
350.391 149.152 li
350.391 149.414 li
cp
f
350.817 154.388 mo
285.698 154.388 li
285.698 154.126 li
350.817 154.126 li
350.817 154.388 li
cp
f
350.817 159.36 mo
285.698 159.36 li
285.698 159.094 li
350.817 159.094 li
350.817 159.36 li
cp
f
350.817 164.338 mo
285.698 164.338 li
285.698 164.071 li
350.817 164.071 li
350.817 164.338 li
cp
f
347.775 169.31 mo
285.698 169.31 li
285.698 169.044 li
347.775 169.044 li
347.775 169.31 li
cp
f
289.473 165.294 mo
289.432 165.312 289.395 165.335 289.354 165.355 cv
289.164 165.481 289.03 165.676 288.979 165.9 cv
288.935 166.124 288.977 166.352 289.1 166.542 cv
289.324 166.894 289.792 167.035 290.173 166.862 cv
290.189 166.855 290.255 166.826 290.287 166.799 cv
290.685 166.542 290.8 166.006 290.545 165.609 cv
290.314 165.258 289.855 165.122 289.473 165.294 cv
cp
290.706 168.047 mo
290.706 168.047 li
289.741 168.482 288.585 168.138 288.01 167.252 cv
287.692 166.765 287.588 166.19 287.711 165.629 cv
287.834 165.065 288.165 164.578 288.649 164.264 cv
289.659 163.602 290.992 163.913 291.636 164.909 cv
292.281 165.901 291.998 167.24 290.992 167.888 cv
290.897 167.951 290.807 168.002 290.706 168.047 cv
cp
.415686 .654902 .945098 rgb
f
296.343 156.408 mo
296.302 156.426 296.269 156.449 296.227 156.473 cv
295.833 156.729 295.718 157.264 295.975 157.663 cv
296.203 158.014 296.662 158.15 297.046 157.977 cv
297.046 157.977 li
297.083 157.96 297.122 157.939 297.162 157.913 cv
297.354 157.788 297.488 157.599 297.538 157.374 cv
297.583 157.148 297.541 156.919 297.417 156.728 cv
297.191 156.376 296.724 156.236 296.343 156.408 cv
cp
297.578 159.164 mo
297.578 159.164 297.578 159.164 297.574 159.165 cv
296.601 159.604 295.467 159.27 294.881 158.364 cv
294.238 157.368 294.522 156.029 295.522 155.382 cv
296.553 154.711 297.877 155.044 298.509 156.025 cv
298.816 156.501 298.928 157.08 298.808 157.647 cv
298.684 158.211 298.354 158.693 297.867 159.008 cv
297.777 159.068 297.679 159.119 297.578 159.164 cv
cp
f
307.831 153.767 mo
307.794 153.785 307.755 153.81 307.719 153.836 cv
307.521 153.963 307.391 154.15 307.342 154.374 cv
307.292 154.6 307.334 154.831 307.463 155.023 cv
307.71 155.411 308.237 155.53 308.645 155.273 cv
308.841 155.15 308.974 154.958 309.024 154.737 cv
309.071 154.513 309.027 154.28 308.905 154.09 cv
308.677 153.735 308.213 153.596 307.831 153.767 cv
cp
309.064 156.526 mo
308.102 156.958 306.945 156.617 306.374 155.733 cv
306.057 155.245 305.949 154.665 306.075 154.105 cv
306.188 153.537 306.527 153.055 307.013 152.745 cv
307.997 152.095 309.358 152.406 309.994 153.382 cv
310.305 153.868 310.409 154.442 310.293 155.004 cv
310.171 155.57 309.84 156.054 309.352 156.365 cv
309.261 156.43 309.162 156.481 309.064 156.526 cv
cp
f
312.452 139.936 mo
312.415 139.952 312.377 139.975 312.337 139.998 cv
311.943 140.252 311.826 140.789 312.083 141.189 cv
312.314 141.54 312.77 141.68 313.155 141.508 cv
313.155 141.508 li
313.197 141.491 313.229 141.467 313.267 141.441 cv
313.667 141.186 313.782 140.648 313.523 140.248 cv
313.295 139.898 312.839 139.762 312.452 139.936 cv
cp
313.689 142.695 mo
313.689 142.695 li
312.725 143.13 311.57 142.782 310.992 141.893 cv
310.345 140.888 310.632 139.555 311.633 138.904 cv
312.605 138.26 313.983 138.564 314.614 139.547 cv
315.265 140.55 314.971 141.891 313.974 142.531 cv
313.883 142.593 313.787 142.65 313.689 142.695 cv
cp
f
327.25 143.915 mo
327.211 143.935 327.171 143.955 327.129 143.98 cv
326.938 144.105 326.803 144.296 326.756 144.521 cv
326.709 144.744 326.753 144.973 326.875 145.17 cv
327.129 145.563 327.646 145.68 328.06 145.421 cv
328.255 145.299 328.392 145.105 328.438 144.877 cv
328.485 144.662 328.443 144.429 328.319 144.238 cv
328.089 143.879 327.625 143.747 327.25 143.915 cv
cp
328.48 146.669 mo
327.503 147.109 326.368 146.775 325.783 145.871 cv
325.469 145.389 325.365 144.812 325.487 144.249 cv
325.608 143.683 325.942 143.197 326.425 142.89 cv
327.408 142.235 328.779 142.552 329.41 143.527 cv
329.722 144.009 329.825 144.588 329.709 145.154 cv
329.591 145.721 329.252 146.202 328.77 146.515 cv
328.677 146.574 328.576 146.626 328.48 146.669 cv
cp
f
331.918 129.876 mo
331.881 129.894 331.844 129.914 331.805 129.939 cv
331.614 130.064 331.481 130.258 331.434 130.483 cv
331.385 130.703 331.427 130.931 331.553 131.124 cv
331.779 131.477 332.243 131.613 332.624 131.441 cv
332.624 131.441 li
332.667 131.42 332.702 131.404 332.747 131.376 cv
332.938 131.257 333.068 131.061 333.115 130.838 cv
333.163 130.612 333.121 130.385 332.997 130.192 cv
332.765 129.837 332.305 129.703 331.918 129.876 cv
cp
333.157 132.627 mo
333.157 132.627 li
332.198 133.061 331.037 132.721 330.462 131.83 cv
330.145 131.347 330.041 130.773 330.161 130.208 cv
330.283 129.642 330.62 129.161 331.102 128.847 cv
332.139 128.176 333.455 128.505 334.086 129.484 cv
334.399 129.966 334.509 130.546 334.385 131.11 cv
334.262 131.676 333.933 132.156 333.448 132.468 cv
333.357 132.532 333.26 132.583 333.157 132.627 cv
cp
f
290.566 164.759 mo
290.324 164.544 li
295.774 158.367 li
296.017 158.583 li
290.566 164.759 li
cp
f
306.952 155.532 mo
297.927 157.753 li
297.852 157.44 li
306.877 155.22 li
306.952 155.532 li
cp
f
308.615 153.596 mo
308.309 153.493 li
312.36 141.596 li
312.673 141.694 li
308.615 153.596 li
cp
f
326.073 144.896 mo
314.179 140.836 li
314.284 140.527 li
326.177 144.585 li
326.073 144.896 li
cp
f
328.064 143.48 mo
327.762 143.378 li
331.821 131.481 li
332.129 131.584 li
328.064 143.48 li
cp
f
344.896 132.892 mo
334.192 131.046 li
334.246 130.727 li
344.955 132.575 li
344.896 132.892 li
cp
f
345.913 133.187 mo
345.871 133.205 345.838 133.227 345.801 133.254 cv
345.605 133.378 345.477 133.57 345.426 133.794 cv
345.379 134.017 345.424 134.246 345.544 134.436 cv
345.773 134.792 346.236 134.928 346.62 134.755 cv
346.62 134.755 li
346.662 134.736 346.701 134.718 346.738 134.693 cv
346.924 134.571 347.06 134.377 347.107 134.15 cv
347.155 133.932 347.112 133.698 346.992 133.501 cv
346.759 133.153 346.296 133.013 345.913 133.187 cv
cp
347.152 135.941 mo
347.152 135.941 li
346.193 136.376 345.029 136.034 344.455 135.146 cv
344.136 134.662 344.037 134.083 344.153 133.519 cv
344.277 132.958 344.609 132.475 345.097 132.159 cv
346.133 131.497 347.447 131.824 348.079 132.801 cv
348.396 133.284 348.503 133.862 348.38 134.425 cv
348.263 134.993 347.924 135.473 347.439 135.788 cv
347.35 135.845 347.254 135.898 347.152 135.941 cv
cp
f
344.922 128.557 mo
356.005 128.557 li
344.922 117.477 li
344.922 128.557 li
cp
.639216 .741176 .760784 rgb
f
441.829 121.57 mo
442.931 121.57 443.818 120.486 443.818 119.145 cv
443.818 61.0146 li
443.818 59.6748 442.931 58.5898 441.829 58.5898 cv
407.616 58.5898 li
406.518 58.5898 405.628 59.6748 405.628 61.0146 cv
405.628 119.145 li
405.628 120.486 406.518 121.57 407.616 121.57 cv
441.829 121.57 li
cp
.235294 .254902 .290196 rgb
f
441.829 120.121 mo
442.931 120.121 443.818 119.036 443.818 117.695 cv
443.818 59.5654 li
443.818 58.228 442.931 57.1401 441.829 57.1401 cv
407.616 57.1401 li
406.518 57.1401 405.628 58.228 405.628 59.5654 cv
405.628 117.695 li
405.628 119.036 406.518 120.121 407.616 120.121 cv
441.829 120.121 li
cp
.333333 .486275 .54902 rgb
f
428.644 59.481 mo
420.378 59.481 li
419.903 59.481 419.497 59.7607 419.34 60.1489 cv
419.293 60.0361 419.263 59.916 419.263 59.7891 cv
419.263 59.2178 419.765 58.7563 420.378 58.7563 cv
428.644 58.7563 li
429.259 58.7563 429.758 59.2178 429.758 59.7891 cv
429.758 59.916 429.73 60.0361 429.684 60.1489 cv
429.524 59.7607 429.12 59.481 428.644 59.481 cv
cp
.25098 .364706 .411765 rgb
f
428.644 60.8198 mo
420.378 60.8198 li
419.903 60.8198 419.497 60.5405 419.34 60.1489 cv
419.497 59.7607 419.903 59.481 420.378 59.481 cv
428.644 59.481 li
429.12 59.481 429.524 59.7607 429.684 60.1489 cv
429.524 60.5405 429.12 60.8198 428.644 60.8198 cv
cp
.466667 .588235 .639216 rgb
f
408.858 62.8232 mo
408.858 62.8975 li
408.858 101.457 li
408.858 112.369 li
440.163 112.369 li
440.163 62.8232 li
408.858 62.8232 li
cp
.980392 .980392 .980392 rgb
f
424.724 114.173 mo
426.199 114.173 427.413 115.248 427.65 116.657 cv
427.681 116.496 427.699 116.331 427.699 116.163 cv
427.699 114.52 426.37 113.188 424.724 113.188 cv
423.079 113.188 421.749 114.52 421.749 116.163 cv
421.749 116.331 421.77 116.496 421.795 116.657 cv
422.037 115.248 423.249 114.173 424.724 114.173 cv
cp
.25098 .364706 .411765 rgb
f
424.724 119.141 mo
426.199 119.141 427.413 118.064 427.65 116.657 cv
427.413 115.248 426.199 114.173 424.724 114.173 cv
423.249 114.173 422.037 115.248 421.795 116.657 cv
422.037 118.064 423.249 119.141 424.724 119.141 cv
cp
.6 .690196 .729412 rgb
f
424.084 88.5317 mo
424.15 88.521 li
424.137 88.437 li
424.084 88.5317 li
cp
.890196 .0235294 .0745098 rgb
f
424.15 88.521 mo
424.084 88.5317 li
424.137 88.437 li
422.343 77.0063 li
415.98 78.0039 411.635 83.9663 412.631 90.3286 cv
413.219 94.0625 415.518 97.0898 418.601 98.7588 cv
420.77 99.9375 423.327 100.451 425.956 100.038 cv
432.316 99.0396 436.662 93.0762 435.662 86.7148 cv
424.15 88.521 li
cp
.415686 .654902 .945098 rgb
f
431.831 75.707 mo
429.678 74.5669 427.159 74.0723 424.565 74.48 cv
426.356 85.9111 li
426.37 85.9956 li
437.891 84.188 li
437.299 80.4219 434.957 77.3726 431.831 75.707 cv
cp
.945098 .282353 .294118 rgb
f
41.3364 269.961 mo
57.751 189.319 li
62.979 190.434 li
45.9595 271.158 li
41.3364 269.961 li
cp
.984314 .980392 .980392 rgb
f
44.9688 272.782 mo
44.9116 272.622 44.8384 272.475 44.7593 272.324 cv
44.3364 271.558 43.6357 270.995 42.7915 270.741 cv
41.9565 270.494 41.0728 270.587 40.3018 271.01 cv
38.8804 271.776 38.2314 273.509 38.7793 275.022 cv
38.7793 275.022 li
38.8374 275.183 38.894 275.341 38.9839 275.488 cv
39.3984 276.258 40.0972 276.816 40.939 277.059 cv
41.7852 277.313 42.6738 277.212 43.4399 276.793 cv
44.8623 276.02 45.5166 274.298 44.9688 272.782 cv
cp
34.0972 276.716 mo
34.0972 276.716 li
32.7231 272.918 34.356 268.577 37.9131 266.638 cv
39.854 265.581 42.0869 265.34 44.209 265.969 cv
46.3242 266.587 48.0732 268.009 49.1362 269.952 cv
51.3833 274.101 49.748 279.029 45.8257 281.161 cv
43.8945 282.222 41.6504 282.465 39.5317 281.842 cv
37.4023 281.21 35.6582 279.802 34.6055 277.86 cv
34.4019 277.489 34.2378 277.103 34.0972 276.716 cv
cp
f
472.538 158.539 mo
472.479 158.379 472.409 158.23 472.328 158.081 cv
471.905 157.314 471.205 156.752 470.359 156.498 cv
469.526 156.251 468.643 156.344 467.872 156.766 cv
466.451 157.533 465.801 159.265 466.349 160.779 cv
466.349 160.779 li
466.406 160.939 466.463 161.097 466.554 161.245 cv
466.968 162.014 467.667 162.572 468.508 162.815 cv
469.353 163.069 470.243 162.968 471.008 162.549 cv
472.431 161.776 473.085 160.055 472.538 158.539 cv
cp
461.666 162.473 mo
461.666 162.473 li
460.291 158.675 461.926 154.333 465.482 152.394 cv
467.423 151.337 469.655 151.096 471.776 151.725 cv
473.893 152.343 475.642 153.765 476.704 155.709 cv
478.953 159.858 477.318 164.785 473.395 166.917 cv
471.463 167.978 469.219 168.222 467.101 167.599 cv
464.972 166.966 463.228 165.558 462.176 163.617 cv
461.97 163.246 461.807 162.86 461.666 162.473 cv
cp
f
90.6826 202.299 mo
90.6826 218.816 77.2925 232.207 60.7778 232.207 cv
44.2583 232.207 30.8677 218.816 30.8677 202.299 cv
30.8677 185.785 44.2583 172.393 60.7778 172.393 cv
77.2925 172.393 90.6826 185.785 90.6826 202.299 cv
cp
.960784 .709804 0 rgb
f
84.7031 202.299 mo
84.7031 215.513 73.9902 226.227 60.7778 226.227 cv
47.562 226.227 36.8511 215.513 36.8511 202.299 cv
36.8511 189.087 47.562 178.374 60.7778 178.374 cv
73.9902 178.374 84.7031 189.087 84.7031 202.299 cv
cp
.980392 .980392 .980392 rgb
f
61.9536 198.093 mo
61.9536 198.5 61.4277 198.826 60.7778 198.826 cv
60.7778 198.826 li
60.1235 198.826 59.5972 198.5 59.5972 198.093 cv
59.5972 184.711 li
59.5972 184.305 60.1235 183.978 60.7778 183.978 cv
60.7778 183.978 li
61.4277 183.978 61.9536 184.305 61.9536 184.711 cv
61.9536 198.093 li
cp
.313726 .337255 .384314 rgb
f
64.4536 202.773 mo
64.0508 202.773 63.7231 202.245 63.7231 201.594 cv
63.7231 201.594 li
63.7231 200.943 64.0508 200.413 64.4536 200.413 cv
77.8345 200.413 li
78.2417 200.413 78.5645 200.943 78.5645 201.594 cv
78.5645 201.594 li
78.5645 202.245 78.2417 202.773 77.8345 202.773 cv
64.4536 202.773 li
cp
f
58.1514 204.278 mo
58.4189 203.852 58.9189 203.682 59.2666 203.901 cv
59.2666 203.901 li
59.6172 204.12 59.6807 204.642 59.4219 205.07 cv
50.6196 219.142 li
50.3564 219.567 49.8535 219.733 49.5068 219.512 cv
49.5068 219.512 li
49.1577 219.296 49.0918 218.773 49.356 218.351 cv
58.1514 204.278 li
cp
.945098 .282353 .294118 rgb
f
64.7759 201.594 mo
64.7759 203.801 62.9844 205.591 60.7778 205.591 cv
58.5659 205.591 56.7783 203.801 56.7783 201.594 cv
56.7783 199.384 58.5659 197.596 60.7778 197.596 cv
62.9844 197.596 64.7759 199.384 64.7759 201.594 cv
cp
.313726 .337255 .384314 rgb
f
63.2705 201.594 mo
63.2705 202.969 62.1484 204.088 60.7778 204.088 cv
59.3979 204.088 58.2778 202.969 58.2778 201.594 cv
58.2778 200.216 59.3979 199.096 60.7778 199.096 cv
62.1484 199.096 63.2705 200.216 63.2705 201.594 cv
cp
.980392 .980392 .980392 rgb
f
173.388 141.768 mo
173.388 142.255 172.969 142.65 172.448 142.65 cv
94.6328 142.65 li
94.1157 142.65 93.6953 142.255 93.6953 141.768 cv
93.6953 90.4722 li
93.6953 89.9839 94.1157 89.585 94.6328 89.585 cv
172.448 89.585 li
172.969 89.585 173.388 89.9839 173.388 90.4722 cv
173.388 141.768 li
cp
.45098 .470588 .505882 rgb
f
172.438 141.768 mo
172.438 142.255 172.014 142.65 171.496 142.65 cv
93.6792 142.65 li
93.1592 142.65 92.7412 142.255 92.7412 141.768 cv
92.7412 90.4722 li
92.7412 89.9839 93.1592 89.585 93.6792 89.585 cv
171.496 89.585 li
172.014 89.585 172.438 89.9839 172.438 90.4722 cv
172.438 141.768 li
cp
.313726 .337255 .384314 rgb
f
168.129 137.926 mo
97.0454 137.926 li
97.0454 93.0376 li
168.129 93.0376 li
168.129 137.926 li
cp
.0980392 .101961 .152941 rgb
f
168.129 139.324 mo
97.0454 139.324 li
97.0454 93.9219 li
168.129 93.9219 li
168.129 139.324 li
cp
.980392 .980392 .980392 rgb
f
168.128 96.0952 mo
97.0454 96.0952 li
97.0454 93.9219 li
168.128 93.9219 li
168.128 96.0952 li
cp
.415686 .654902 .945098 rgb
f
132.799 143.564 mo
80.8989 143.564 li
80.8989 143.564 80.8989 144.711 80.8989 146.131 cv
80.8989 147.552 81.9004 148.697 83.1377 148.697 cv
132.799 148.697 li
182.461 148.697 li
183.696 148.697 184.7 147.552 184.7 146.131 cv
184.7 144.711 184.7 143.564 184.7 143.564 cv
132.799 143.564 li
cp
.45098 .470588 .505882 rgb
f
100.523 95.0845 mo
100.523 95.4424 100.229 95.7373 99.8687 95.7373 cv
99.5083 95.7373 99.2173 95.4424 99.2173 95.0845 cv
99.2173 94.7241 99.5083 94.4297 99.8687 94.4297 cv
100.229 94.4297 100.523 94.7241 100.523 95.0845 cv
cp
.960784 .709804 0 rgb
f
102.824 95.0845 mo
102.824 95.4424 102.534 95.7373 102.17 95.7373 cv
101.811 95.7373 101.519 95.4424 101.519 95.0845 cv
101.519 94.7241 101.811 94.4297 102.17 94.4297 cv
102.534 94.4297 102.824 94.7241 102.824 95.0845 cv
cp
.945098 .282353 .294118 rgb
f
105.401 95.0845 mo
105.401 95.4424 105.11 95.7373 104.749 95.7373 cv
104.389 95.7373 104.095 95.4424 104.095 95.0845 cv
104.095 94.7241 104.389 94.4297 104.749 94.4297 cv
105.11 94.4297 105.401 94.7241 105.401 95.0845 cv
cp
.313726 .337255 .384314 rgb
f
184.919 142.467 mo
132.589 142.467 li
80.2598 142.467 li
80.2598 142.467 80.2598 143.62 80.2598 145.038 cv
184.919 145.038 li
184.919 143.62 184.919 142.467 184.919 142.467 cv
cp
.94902 .94902 .94902 rgb
f
80.2598 145.038 mo
80.2598 145.038 li
80.2598 146.456 81.27 147.604 82.5181 147.604 cv
132.589 147.604 li
182.657 147.604 li
183.902 147.604 184.919 146.456 184.919 145.038 cv
184.919 145.038 li
80.2598 145.038 li
cp
.886275 .886275 .886275 rgb
f
110.551 102.568 mo
110.551 136.628 li
104.04 136.628 li
104.04 102.568 li
110.551 102.568 li
cp
.415686 .654902 .945098 rgb
f
135.842 106.751 mo
135.842 136.628 li
129.33 136.628 li
129.33 106.751 li
135.842 106.751 li
cp
.945098 .282353 .294118 rgb
f
161.133 112.003 mo
161.133 136.628 li
154.613 136.628 li
154.613 112.003 li
161.133 112.003 li
cp
.415686 .654902 .945098 rgb
f
124.071 112.126 mo
124.071 136.628 li
117.567 136.628 li
117.567 112.126 li
124.071 112.126 li
cp
.960784 .709804 0 rgb
f
148.11 116.649 mo
148.11 136.628 li
141.603 136.628 li
141.603 116.649 li
148.11 116.649 li
cp
f
152.516 143.93 mo
152.516 144.383 152.151 144.749 151.697 144.749 cv
151.245 144.749 150.879 144.383 150.879 143.93 cv
150.879 143.479 151.245 143.113 151.697 143.113 cv
152.151 143.113 152.516 143.479 152.516 143.93 cv
cp
.980392 .980392 .980392 rgb
f
158.108 143.93 mo
158.108 144.383 157.745 144.749 157.291 144.749 cv
156.84 144.749 156.474 144.383 156.474 143.93 cv
156.474 143.479 156.84 143.113 157.291 143.113 cv
157.745 143.113 158.108 143.479 158.108 143.93 cv
cp
f
163.737 143.93 mo
163.737 144.383 163.373 144.749 162.917 144.749 cv
162.467 144.749 162.098 144.383 162.098 143.93 cv
162.098 143.479 162.467 143.113 162.917 143.113 cv
163.373 143.113 163.737 143.479 163.737 143.93 cv
cp
f
255.229 253.701 mo
193.683 253.701 li
193.683 175.886 li
255.229 175.886 li
255.229 253.701 li
cp
.101961 .352941 .4 rgb
f
254.083 251.962 mo
193.683 251.962 li
193.683 175.886 li
254.083 175.886 li
254.083 251.962 li
cp
.980392 .980392 .980392 rgb
f
254.083 179.785 mo
193.683 179.785 li
193.683 175.886 li
254.083 175.886 li
254.083 179.785 li
cp
.313726 .337255 .384314 rgb
f
196.744 177.833 mo
196.744 178.185 196.46 178.469 196.107 178.469 cv
195.759 178.469 195.473 178.185 195.473 177.833 cv
195.473 177.483 195.759 177.198 196.107 177.198 cv
196.46 177.198 196.744 177.483 196.744 177.833 cv
cp
.960784 .709804 0 rgb
f
198.98 177.833 mo
198.98 178.185 198.699 178.469 198.348 178.469 cv
197.998 178.469 197.713 178.185 197.713 177.833 cv
197.713 177.483 197.998 177.198 198.348 177.198 cv
198.699 177.198 198.98 177.483 198.98 177.833 cv
cp
.945098 .282353 .294118 rgb
f
201.488 177.833 mo
201.488 178.185 201.203 178.469 200.856 178.469 cv
200.503 178.469 200.22 178.185 200.22 177.833 cv
200.22 177.483 200.503 177.198 200.856 177.198 cv
201.203 177.198 201.488 177.483 201.488 177.833 cv
cp
.415686 .654902 .945098 rgb
f
225.691 195.921 mo
225.691 205.862 li
231.18 205.862 235.63 210.313 235.63 215.802 cv
235.63 217.554 235.134 219.175 234.339 220.602 cv
232.629 223.645 229.433 225.729 225.691 225.729 cv
221.956 225.729 218.753 223.645 217.047 220.602 cv
206.428 220.602 li
208.588 229.249 216.38 235.667 225.691 235.667 cv
235.003 235.667 242.805 229.249 244.954 220.602 cv
245.34 219.063 245.564 217.458 245.564 215.802 cv
245.564 204.807 236.672 195.921 225.691 195.921 cv
cp
.945098 .282353 .294118 rgb
f
212.153 212.526 mo
212.153 207.033 216.58 202.581 222.08 202.581 cv
222.08 192.642 li
211.099 192.642 202.202 201.545 202.202 212.526 cv
202.202 214.179 202.432 215.802 202.811 217.326 cv
213.443 217.326 li
212.644 215.902 212.153 214.278 212.153 212.526 cv
cp
.960784 .709804 0 rgb
f
342.667 269.785 mo
398.558 269.785 li
398.558 199.318 li
342.667 199.318 li
342.667 269.785 li
cp
.101961 .352941 .4 rgb
f
342.667 268.211 mo
397.363 268.211 li
397.363 199.318 li
342.667 199.318 li
342.667 268.211 li
cp
.980392 .980392 .980392 rgb
f
342.667 202.849 mo
397.363 202.849 li
397.363 199.318 li
342.667 199.318 li
342.667 202.849 li
cp
.313726 .337255 .384314 rgb
f
394.796 201.083 mo
394.796 201.401 395.055 201.66 395.369 201.66 cv
395.691 201.66 395.948 201.401 395.948 201.083 cv
395.948 200.765 395.691 200.508 395.369 200.508 cv
395.055 200.508 394.796 200.765 394.796 201.083 cv
cp
.960784 .709804 0 rgb
f
392.769 201.083 mo
392.769 201.401 393.027 201.66 393.342 201.66 cv
393.663 201.66 393.918 201.401 393.918 201.083 cv
393.918 200.765 393.663 200.508 393.342 200.508 cv
393.027 200.508 392.769 200.765 392.769 201.083 cv
cp
.945098 .282353 .294118 rgb
f
390.496 201.083 mo
390.496 201.401 390.756 201.66 391.073 201.66 cv
391.39 201.66 391.649 201.401 391.649 201.083 cv
391.649 200.765 391.39 200.508 391.073 200.508 cv
390.756 200.508 390.496 200.765 390.496 201.083 cv
cp
.415686 .654902 .945098 rgb
f
357.339 209.127 mo
357.339 232.948 li
366.554 232.948 li
357.339 209.127 li
cp
f
348.124 232.948 mo
357.339 232.948 li
357.339 209.127 li
348.124 232.948 li
cp
.960784 .709804 0 rgb
f
383.89 209.127 mo
383.89 232.948 li
393.103 232.948 li
383.89 209.127 li
cp
f
374.675 232.948 mo
383.89 232.948 li
383.89 209.127 li
374.675 232.948 li
cp
.945098 .282353 .294118 rgb
f
393.223 248.708 mo
348.003 248.708 li
348.003 245.142 li
393.223 245.142 li
393.223 248.708 li
cp
.415686 .654902 .945098 rgb
f
393.223 257.825 mo
348.003 257.825 li
348.003 254.259 li
393.223 254.259 li
393.223 257.825 li
cp
f
428.949 203.399 mo
425.825 204.669 422.288 203.255 420.901 200.186 cv
420.867 200.109 420.833 200.032 420.803 199.958 cv
420.175 198.409 420.188 196.712 420.837 195.171 cv
421.489 193.632 422.699 192.439 424.247 191.811 cv
427.371 190.543 430.907 191.955 432.294 195.025 cv
432.329 195.101 432.361 195.178 432.391 195.254 cv
433.688 198.447 432.145 202.104 428.949 203.399 cv
cp
437.464 195.426 mo
435.928 191.634 li
433.291 192.704 li
432.83 192.081 432.282 191.529 431.668 191.061 cv
432.768 188.461 li
432.775 188.439 li
429.008 186.845 li
427.898 189.466 li
427.13 189.352 426.354 189.346 425.588 189.452 cv
424.526 186.838 li
424.517 186.815 li
420.727 188.352 li
421.797 190.989 li
421.167 191.456 420.616 192.005 420.155 192.612 cv
417.552 191.514 li
417.528 191.503 li
415.934 195.275 li
418.56 196.383 li
418.446 197.14 418.435 197.917 418.54 198.691 cv
415.926 199.751 li
415.903 199.762 li
417.441 203.554 li
420.078 202.485 li
420.539 203.107 421.085 203.661 421.701 204.13 cv
420.603 206.729 li
420.594 206.751 li
424.363 208.344 li
425.473 205.724 li
426.237 205.837 427.015 205.843 427.779 205.739 cv
428.843 208.352 li
428.852 208.375 li
432.645 206.835 li
431.574 204.198 li
432.204 203.734 432.753 203.184 433.217 202.576 cv
435.817 203.675 li
435.841 203.686 li
437.434 199.915 li
434.809 198.806 li
434.923 198.051 434.932 197.273 434.826 196.498 cv
437.441 195.436 li
437.464 195.426 li
cp
.360784 .764706 .839216 rgb
f
428.949 203.399 mo
427.439 204.007 425.781 204.012 424.27 203.408 cv
422.766 202.804 421.567 201.659 420.903 200.183 cv
420.867 200.108 420.835 200.032 420.805 199.958 cv
420.175 198.408 420.189 196.712 420.841 195.171 cv
421.489 193.632 422.699 192.441 424.247 191.811 cv
425.755 191.202 427.415 191.197 428.925 191.803 cv
430.431 192.406 431.626 193.552 432.294 195.026 cv
432.326 195.101 432.358 195.178 432.389 195.254 cv
433.688 198.447 432.142 202.102 428.949 203.399 cv
cp
432.294 195.025 mo
430.907 191.955 427.371 190.543 424.247 191.811 cv
422.699 192.439 421.489 193.632 420.837 195.171 cv
420.188 196.712 420.175 198.409 420.803 199.958 cv
420.833 200.032 420.867 200.109 420.901 200.186 cv
422.288 203.255 425.825 204.669 428.949 203.399 cv
432.145 202.104 433.688 198.447 432.391 195.254 cv
432.361 195.178 432.329 195.101 432.294 195.025 cv
cp
f
428.517 202.089 mo
426.024 203.101 423.178 201.899 422.166 199.404 cv
421.153 196.91 422.356 194.067 424.851 193.052 cv
427.345 192.04 430.188 193.243 431.201 195.737 cv
432.214 198.232 431.015 201.077 428.517 202.089 cv
cp
431.817 195.477 mo
431.789 195.407 431.759 195.34 431.728 195.273 cv
430.478 192.507 427.297 191.238 424.484 192.379 cv
423.094 192.947 422.003 194.017 421.417 195.403 cv
420.831 196.787 420.823 198.319 421.389 199.711 cv
421.415 199.779 421.445 199.848 421.476 199.915 cv
422.724 202.68 425.905 203.949 428.718 202.809 cv
431.594 201.641 432.982 198.352 431.817 195.477 cv
cp
f
127.252 277.799 mo
120.573 280.513 113.012 277.491 110.048 270.93 cv
109.977 270.767 109.903 270.603 109.84 270.443 cv
108.496 267.13 108.521 263.505 109.911 260.21 cv
111.303 256.922 113.891 254.372 117.201 253.028 cv
123.88 250.316 131.438 253.336 134.402 259.897 cv
134.475 260.061 134.544 260.227 134.611 260.388 cv
137.382 267.213 134.085 275.027 127.252 277.799 cv
cp
145.455 260.756 mo
142.167 252.65 li
136.534 254.936 li
135.548 253.605 134.379 252.425 133.063 251.424 cv
135.413 245.868 li
135.431 245.817 li
127.375 242.411 li
125.005 248.015 li
123.364 247.771 121.707 247.759 120.065 247.984 cv
117.798 242.398 li
117.776 242.347 li
109.673 245.635 li
111.962 251.271 li
110.618 252.269 109.439 253.444 108.452 254.741 cv
102.888 252.39 li
102.836 252.37 li
99.4302 260.433 li
105.043 262.801 li
104.801 264.421 104.777 266.08 104.999 267.736 cv
99.4121 270.003 li
99.3628 270.023 li
102.651 278.13 li
108.29 275.848 li
109.274 277.174 110.44 278.358 111.759 279.362 cv
109.41 284.917 li
109.389 284.963 li
117.451 288.372 li
119.82 282.768 li
121.453 283.011 123.116 283.024 124.753 282.799 cv
127.024 288.389 li
127.043 288.438 li
135.151 285.146 li
132.863 279.507 li
134.208 278.515 135.385 277.339 136.372 276.04 cv
141.934 278.389 li
141.985 278.41 li
145.387 270.351 li
139.776 267.98 li
140.023 266.368 140.04 264.702 139.818 263.045 cv
145.407 260.777 li
145.455 260.756 li
cp
f
127.252 277.799 mo
124.025 279.1 120.477 279.108 117.249 277.818 cv
114.031 276.528 111.475 274.077 110.052 270.925 cv
109.977 270.766 109.907 270.603 109.842 270.443 cv
108.496 267.13 108.525 263.505 109.918 260.21 cv
111.303 256.922 113.891 254.377 117.201 253.028 cv
120.422 251.727 123.974 251.714 127.202 253.011 cv
130.417 254.3 132.976 256.749 134.402 259.9 cv
134.472 260.061 134.542 260.227 134.607 260.388 cv
137.38 267.213 134.078 275.024 127.252 277.799 cv
cp
134.402 259.897 mo
131.438 253.336 123.88 250.316 117.201 253.028 cv
113.891 254.372 111.303 256.922 109.911 260.21 cv
108.521 263.505 108.496 267.13 109.84 270.443 cv
109.903 270.603 109.977 270.767 110.048 270.93 cv
113.012 277.491 120.573 280.513 127.252 277.799 cv
134.085 275.027 137.382 267.213 134.611 260.388 cv
134.544 260.227 134.475 260.061 134.402 259.897 cv
cp
f
126.328 274.997 mo
120.998 277.161 114.915 274.595 112.751 269.26 cv
110.588 263.928 113.157 257.85 118.489 255.682 cv
123.823 253.518 129.901 256.09 132.065 261.42 cv
134.231 266.753 131.664 272.833 126.328 274.997 cv
cp
133.381 260.865 mo
133.321 260.712 133.26 260.571 133.195 260.426 cv
130.524 254.516 123.719 251.802 117.709 254.242 cv
114.733 255.456 112.403 257.744 111.149 260.705 cv
109.898 263.666 109.879 266.94 111.089 269.915 cv
111.148 270.061 111.21 270.206 111.273 270.351 cv
113.942 276.264 120.746 278.974 126.757 276.537 cv
132.904 274.041 135.876 267.008 133.381 260.865 cv
cp
f
51.7949 74.4434 mo
49.5332 75.3623 46.9727 74.3384 45.9692 72.1167 cv
45.9443 72.062 45.9199 72.0059 45.8984 71.9526 cv
45.4434 70.8301 45.4521 69.603 45.9229 68.4873 cv
46.394 67.3735 47.2705 66.5103 48.3911 66.0547 cv
50.6533 65.1372 53.2129 66.1592 54.2153 68.3809 cv
54.2402 68.4365 54.2637 68.4927 54.2861 68.5469 cv
55.2251 70.8584 54.1084 73.5049 51.7949 74.4434 cv
cp
57.9585 68.6719 mo
56.8457 65.9272 li
54.938 66.7012 li
54.604 66.25 54.208 65.8506 53.7627 65.5117 cv
54.5586 63.6304 li
54.564 63.6128 li
51.8369 62.4595 li
51.0337 64.3579 li
50.4785 64.2754 49.9175 64.2705 49.3613 64.3472 cv
48.5928 62.4556 li
48.5864 62.4375 li
45.8413 63.5513 li
46.6172 65.4604 li
46.1626 65.7979 45.7622 66.1958 45.4282 66.6353 cv
43.5444 65.8389 li
43.5264 65.8315 li
42.3735 68.562 li
44.2744 69.3643 li
44.1924 69.9126 44.1831 70.4751 44.2593 71.0356 cv
42.3677 71.8022 li
42.3501 71.8105 li
43.4648 74.5557 li
45.374 73.7822 li
45.707 74.2314 46.1016 74.6328 46.5479 74.9727 cv
45.7524 76.8535 li
45.7456 76.8691 li
48.4756 78.0229 li
49.2778 76.1255 li
49.8311 76.208 50.3945 76.2124 50.9482 76.1367 cv
51.7173 78.0293 li
51.7246 78.0459 li
54.4692 76.9307 li
53.6953 75.0215 li
54.1504 74.6851 54.5488 74.2871 54.8828 73.8481 cv
56.7661 74.6431 li
56.7837 74.6499 li
57.936 71.9209 li
56.0361 71.1182 li
56.1191 70.5718 56.1255 70.0083 56.0508 69.4473 cv
57.9429 68.6792 li
57.9585 68.6719 li
cp
f
51.7949 74.4434 mo
50.7017 74.8838 49.5005 74.8867 48.4082 74.4492 cv
47.3174 74.0132 46.4521 73.1831 45.9702 72.1152 cv
45.9443 72.061 45.9209 72.0059 45.8994 71.9526 cv
45.4434 70.8301 45.4536 69.603 45.9248 68.4873 cv
46.394 67.3735 47.2705 66.5117 48.3911 66.0547 cv
49.4814 65.6143 50.6846 65.6099 51.7769 66.0488 cv
52.8657 66.4858 53.7329 67.3149 54.2153 68.3828 cv
54.2402 68.4365 54.2627 68.4927 54.2847 68.5469 cv
55.2251 70.8584 54.106 73.5039 51.7949 74.4434 cv
cp
54.2153 68.3809 mo
53.2129 66.1592 50.6533 65.1372 48.3911 66.0547 cv
47.2705 66.5103 46.394 67.3735 45.9229 68.4873 cv
45.4521 69.603 45.4434 70.8301 45.8984 71.9526 cv
45.9199 72.0059 45.9443 72.062 45.9692 72.1167 cv
46.9727 74.3384 49.5332 75.3623 51.7949 74.4434 cv
54.1084 73.5049 55.2251 70.8584 54.2861 68.5469 cv
54.2637 68.4927 54.2402 68.4365 54.2153 68.3809 cv
cp
f
51.4819 73.4946 mo
49.6772 74.2271 47.6172 73.3579 46.8843 71.5513 cv
46.1519 69.7461 47.022 67.688 48.8276 66.9536 cv
50.6328 66.2207 52.6914 67.0913 53.4248 68.897 cv
54.1587 70.7026 53.2891 72.7617 51.4819 73.4946 cv
cp
53.8701 68.7085 mo
53.8501 68.6572 53.8286 68.6094 53.8066 68.5601 cv
52.9019 66.5581 50.5981 65.6401 48.563 66.4663 cv
47.5552 66.877 46.7661 67.6519 46.3418 68.6548 cv
45.9185 69.6572 45.9116 70.7656 46.3213 71.7729 cv
46.3418 71.8228 46.3623 71.8716 46.3838 71.9209 cv
47.2876 73.9233 49.5923 74.8408 51.627 74.0161 cv
53.7085 73.1704 54.7148 70.7896 53.8701 68.7085 cv
cp
f
371.343 68.4028 mo
369.08 69.3213 366.52 68.2979 365.518 66.0762 cv
365.491 66.0215 365.467 65.9648 365.445 65.9121 cv
364.99 64.7896 365 63.562 365.472 62.4468 cv
365.942 61.333 366.817 60.4692 367.939 60.0142 cv
370.201 59.0967 372.76 60.1187 373.763 62.3403 cv
373.788 62.3955 373.81 62.4521 373.833 62.5063 cv
374.772 64.8179 373.655 67.4644 371.343 68.4028 cv
cp
377.506 62.6313 mo
376.394 59.8867 li
374.485 60.6606 li
374.15 60.2095 373.756 59.8101 373.31 59.4712 cv
374.106 57.5898 li
374.112 57.5723 li
371.385 56.4189 li
370.582 58.3174 li
370.026 58.2344 369.465 58.23 368.909 58.3066 cv
368.141 56.415 li
368.134 56.397 li
365.389 57.5103 li
366.166 59.4199 li
365.711 59.7573 365.31 60.1553 364.976 60.5947 cv
363.092 59.7983 li
363.074 59.791 li
361.921 62.5215 li
363.822 63.3237 li
363.74 63.8721 363.73 64.4341 363.807 64.9946 cv
361.914 65.7617 li
361.898 65.77 li
363.012 68.5146 li
364.922 67.7412 li
365.254 68.1909 365.648 68.5923 366.096 68.9321 cv
365.3 70.813 li
365.294 70.8286 li
368.023 71.9824 li
368.824 70.085 li
369.378 70.1675 369.941 70.1719 370.495 70.0957 cv
371.265 71.9888 li
371.272 72.0054 li
374.016 70.8901 li
373.243 68.981 li
373.698 68.6445 374.097 68.2466 374.431 67.8071 cv
376.314 68.6025 li
376.331 68.6094 li
377.484 65.8804 li
375.584 65.0771 li
375.666 64.5313 375.673 63.9678 375.598 63.4067 cv
377.49 62.6387 li
377.506 62.6313 li
cp
f
371.343 68.4028 mo
370.25 68.8428 369.048 68.8462 367.955 68.4087 cv
366.864 67.9722 366.001 67.1426 365.518 66.0747 cv
365.491 66.0205 365.47 65.9648 365.447 65.9121 cv
364.99 64.7896 365 63.562 365.474 62.4468 cv
365.942 61.333 366.817 60.4707 367.939 60.0142 cv
369.03 59.5737 370.231 59.5693 371.324 60.0083 cv
372.414 60.4453 373.281 61.2744 373.763 62.3423 cv
373.788 62.3955 373.81 62.4521 373.833 62.5063 cv
374.772 64.8179 373.653 67.4629 371.343 68.4028 cv
cp
373.763 62.3403 mo
372.76 60.1187 370.201 59.0967 367.939 60.0142 cv
366.817 60.4692 365.942 61.333 365.472 62.4468 cv
365 63.562 364.99 64.7896 365.445 65.9121 cv
365.467 65.9648 365.491 66.0215 365.518 66.0762 cv
366.52 68.2979 369.08 69.3213 371.343 68.4028 cv
373.655 67.4644 374.772 64.8179 373.833 62.5063 cv
373.81 62.4521 373.788 62.3955 373.763 62.3403 cv
cp
f
371.028 67.4541 mo
369.226 68.186 367.164 67.3174 366.432 65.5107 cv
365.698 63.7056 366.57 61.6475 368.376 60.9131 cv
370.182 60.1802 372.238 61.0508 372.974 62.856 cv
373.706 64.6621 372.836 66.7207 371.028 67.4541 cv
cp
373.418 62.668 mo
373.397 62.6167 373.376 62.5688 373.353 62.5195 cv
372.45 60.5176 370.145 59.5991 368.11 60.4258 cv
367.103 60.8364 366.314 61.6113 365.89 62.6143 cv
365.465 63.6167 365.459 64.7251 365.87 65.7324 cv
365.89 65.7822 365.91 65.8311 365.933 65.8804 cv
366.836 67.8828 369.141 68.8003 371.174 67.9756 cv
373.257 67.1299 374.262 64.7485 373.418 62.668 cv
cp
f
224.957 57.5576 mo
224.966 57.4419 224.979 57.3252 224.979 57.2095 cv
224.979 53.4453 221.536 50.395 217.292 50.395 cv
216.694 50.395 216.116 50.46 215.561 50.5728 cv
215.268 46.8618 211.953 43.9292 207.899 43.9292 cv
203.652 43.9292 200.208 47.1445 200.208 51.1069 cv
200.208 51.4307 200.241 51.749 200.283 52.0625 cv
200.058 52.042 199.833 52.0313 199.604 52.0313 cv
195.357 52.0313 191.913 55.0947 191.913 58.873 cv
191.913 59.0576 191.931 59.2363 191.946 59.4165 cv
191.934 59.4165 191.926 59.4165 191.913 59.4165 cv
188.401 59.4165 185.348 60.6821 185.131 64.6299 cv
185.05 66.1367 185.6 68.4941 188.842 69.8066 cv
190.634 70.5313 194.532 70.3237 204.789 70.3237 cv
217.36 70.3237 228.694 70.3496 228.694 70.3496 cv
231.569 69.8403 233.007 67.4692 233.242 65.2319 cv
233.711 60.8647 229.679 57.4419 224.957 57.5576 cv
cp
.929412 .929412 .929412 rgb
f
237.734 55.3145 mo
237.738 55.2354 237.747 55.1509 237.747 55.0688 cv
237.747 52.4258 235.324 50.2798 232.338 50.2798 cv
231.922 50.2798 231.517 50.3257 231.125 50.4048 cv
230.918 47.7939 228.588 45.7344 225.739 45.7344 cv
222.752 45.7344 220.33 47.9956 220.33 50.7822 cv
220.33 51.0083 220.354 51.231 220.386 51.4507 cv
220.229 51.4385 220.068 51.4302 219.906 51.4302 cv
216.919 51.4302 214.498 53.5835 214.498 56.2402 cv
214.498 56.3711 214.51 56.4951 214.522 56.6221 cv
214.513 56.6221 214.506 56.6221 214.498 56.6221 cv
212.027 56.6221 209.885 57.5127 209.73 60.2876 cv
209.671 61.3477 210.061 63.0044 212.34 63.9287 cv
213.599 64.437 216.34 64.2896 223.554 64.2896 cv
232.391 64.2896 240.357 64.3101 240.357 64.3101 cv
242.383 63.9507 243.389 62.2847 243.556 60.7109 cv
243.886 57.6431 241.051 55.2354 237.734 55.3145 cv
cp
.984314 .980392 .980392 rgb
f
368.711 345.277 mo
368.719 345.162 368.732 345.044 368.732 344.929 cv
368.732 341.165 365.289 338.113 361.046 338.113 cv
360.448 338.113 359.87 338.179 359.314 338.293 cv
359.02 334.581 355.705 331.648 351.651 331.648 cv
347.406 331.648 343.96 334.864 343.96 338.826 cv
343.96 339.15 343.994 339.469 344.037 339.781 cv
343.811 339.761 343.586 339.751 343.358 339.751 cv
339.111 339.751 335.665 342.815 335.665 346.592 cv
335.665 346.777 335.684 346.955 335.697 347.136 cv
335.685 347.136 335.678 347.136 335.665 347.136 cv
332.155 347.136 329.102 348.401 328.884 352.35 cv
328.804 353.856 329.353 356.215 332.594 357.526 cv
334.387 358.25 338.286 358.044 348.542 358.044 cv
361.114 358.044 372.446 358.069 372.446 358.069 cv
375.323 357.56 376.758 355.19 376.996 352.951 cv
377.465 348.585 373.433 345.162 368.711 345.277 cv
cp
.929412 .929412 .929412 rgb
f
381.488 343.034 mo
381.492 342.955 381.5 342.871 381.5 342.789 cv
381.5 340.145 379.077 338 376.092 338 cv
375.675 338 375.27 338.045 374.878 338.125 cv
374.671 335.513 372.342 333.454 369.491 333.454 cv
366.507 333.454 364.083 335.716 364.083 338.501 cv
364.083 338.728 364.105 338.95 364.14 339.172 cv
363.982 339.158 363.821 339.15 363.66 339.15 cv
360.673 339.15 358.252 341.303 358.252 343.96 cv
358.252 344.091 358.264 344.215 358.276 344.343 cv
358.266 344.343 358.26 344.343 358.252 344.343 cv
355.78 344.343 353.639 345.233 353.483 348.007 cv
353.425 349.066 353.813 350.725 356.092 351.648 cv
357.352 352.156 360.092 352.009 367.308 352.009 cv
376.145 352.009 384.111 352.029 384.111 352.029 cv
386.136 351.669 387.143 350.004 387.31 348.431 cv
387.638 345.363 384.804 342.955 381.488 343.034 cv
cp
.984314 .980392 .980392 rgb
f
282 219.125 mo
279.845 221.28 li
279.845 276.593 li
220.532 276.593 li
218.361 279.862 li
282 279.862 li
282 219.125 li
cp
.101961 .352941 .4 rgb
f
279.845 276.593 mo
279.845 221.28 li
240.25 195.25 205.169 234.787 221.631 276.593 cv
279.845 276.593 li
cp
.980392 .980392 .980392 rgb
f
268.321 224.712 mo
268.321 221.318 267.818 218.044 266.894 214.954 cv
259.942 212.712 253.316 212.43 247.302 213.718 cv
249.698 216.531 251.183 220.134 251.329 224.082 cv
268.3 225.346 li
268.304 225.134 268.321 224.925 268.321 224.712 cv
cp
.945098 .282353 .294118 rgb
f
234.384 241.663 mo
229.208 241.663 224.631 239.319 221.532 235.658 cv
219.078 241.185 217.652 247.444 217.492 254.115 cv
222.463 256.986 228.227 258.635 234.384 258.635 cv
237.708 258.635 240.917 258.15 243.951 257.258 cv
239.722 240.786 li
238.048 241.35 236.258 241.663 234.384 241.663 cv
cp
f
251.005 228.027 mo
267.179 233.274 li
267.211 233.152 267.248 233.031 267.278 232.908 cv
267.889 230.478 268.247 227.949 268.3 225.346 cv
251.329 224.082 li
251.336 224.293 251.357 224.499 251.357 224.712 cv
251.357 225.851 251.233 226.958 251.005 228.027 cv
cp
f
249.153 232.908 mo
249.017 233.149 248.871 233.383 248.724 233.617 cv
262.122 244.198 li
263.682 241.977 264.983 239.562 265.981 236.995 cv
250.486 229.905 li
250.132 230.952 249.683 231.956 249.153 232.908 cv
cp
.945098 .537255 .545098 rgb
f
244.754 238.057 mo
253.885 252.45 li
256.161 250.843 258.23 248.963 260.046 246.856 cv
247.747 235.022 li
246.875 236.154 245.872 237.175 244.754 238.057 cv
cp
f
239.722 240.786 mo
243.951 257.258 li
246.69 256.452 249.284 255.311 251.686 253.879 cv
243.657 238.85 li
242.446 239.658 241.127 240.312 239.722 240.786 cv
cp
.945098 .282353 .294118 rgb
f
232.801 286.602 mo
230.629 284.518 li
230.553 284.619 li
221.018 275.57 216.183 261.982 218.932 248.135 cv
223.195 226.666 244.053 212.721 265.521 216.984 cv
286.988 221.246 300.935 242.104 296.671 263.574 cv
292.41 285.037 271.552 298.988 250.084 294.725 cv
243.515 293.418 237.656 290.555 232.801 286.602 cv
cp
285.741 218.025 mo
264.852 202.596 235.409 207.02 219.98 227.908 cv
205.515 247.49 208.498 274.584 226.128 290.609 cv
218.05 301.547 li
215.47 299.639 li
173.684 356.211 li
187.316 366.277 li
229.102 309.709 li
226.521 307.801 li
234.666 296.775 li
255.06 308.334 281.339 303.119 295.624 283.779 cv
311.053 262.895 306.624 233.449 285.741 218.025 cv
cp
.101961 .352941 .4 rgb
f
202.689 335.086 mo
194.217 328.828 li
228.234 282.777 li
235.895 290.133 li
202.689 335.086 li
cp
.345098 .529412 .65098 rgb
f
228.864 290.045 mo
209.024 275.391 204.819 247.418 219.476 227.576 cv
234.133 207.734 262.106 203.529 281.943 218.182 cv
301.793 232.846 305.995 260.813 291.336 280.656 cv
276.684 300.5 248.713 304.705 228.864 290.045 cv
cp
283.344 216.289 mo
262.456 200.858 233.014 205.281 217.585 226.17 cv
202.153 247.063 206.581 276.508 227.469 291.934 cv
248.352 307.361 277.795 302.935 293.23 282.043 cv
308.659 261.156 304.229 231.713 283.344 216.289 cv
cp
f
184.921 364.541 mo
171.29 354.473 li
213.074 297.9 li
226.706 307.971 li
184.921 364.541 li
cp
.643137 .780392 .8 rgb
f
174.02 356.49 mo
171.29 354.473 li
213.074 297.9 li
215.806 299.92 li
174.02 356.49 li
cp
.345098 .529412 .65098 rgb
f
182.188 362.522 mo
184.921 364.541 li
226.706 307.971 li
223.972 305.953 li
182.188 362.522 li
cp
f
247.689 292.986 mo
226.222 288.725 212.275 267.865 216.537 246.396 cv
220.799 224.932 241.658 210.982 263.127 215.246 cv
284.591 219.508 298.538 240.367 294.277 261.834 cv
290.016 283.301 269.155 297.248 247.689 292.986 cv
cp
282.613 217.275 mo
262.274 202.252 233.596 206.563 218.57 226.906 cv
203.543 247.25 207.854 275.93 228.195 290.949 cv
248.545 305.982 277.221 301.668 292.243 281.326 cv
307.271 260.982 302.964 232.307 282.613 217.275 cv
cp
.643137 .780392 .8 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (\700\753\745\752\761\745\751 \705\743\756\760\756\742) ()
%%Title: (1403.m00.i103.n005.S.c10.166712030 Web statistics and analytics.eps)
%%CreationDate: 3/6/2014 4:40 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2KIfC8Z_Y&""=R;<e,oN&Z(8RtOh1`A7K@Lu@m#_Zc$Edr=_qg4X/mKOSC9ao4P$%dq2b?=+H<S`)tDRS56<,.E!D"HQW
%Pa5LZ1bC$3V>^51h7M!J#M%+%N-qte]<!p%qsA"+g?I[eok(hBT$%![2,_&_1\di3H=*f+S,]:iohtSeg17Y2ENrQJ(7X^7;E&0b
%2$05eeG+.k>!WDgRGcB\p*G5!X5,C%!rAd6&"[CN6fQ&RhpTP@NhLrCK`0#t%!]8>?$pZ4S_jUb2#R8s)8"",gH=h2[8gt.]!Z,P
%#$Ogen8AWI9]`=QV-^jYo19*fn?KTq_CekeHS'nmW0IgUd-7/Ls7'I-lN>YO2')]%BZ$J3Z]R"A(6>f:T>rYp7^0:b-/`Q+2UI3`
%5faR4'"N?g]kl4lh("9/&6`85edN#F_LEtEO:NM;l&M)'Cll6kUhr2)o:PZ1`!o\=qKK(<c[+kZ[8a-6V5,p7mU>L4+Al)U:`Tj+
%kgca$f8WrMfZ"qW/;W+oV-4*ZKBC.!M8UI0P($&_UJgujg''WVepAg#op"d'o!3JM;u0?[NR[&4H`_&CW;2/p$EEFmo`F5bl6>?$
%NY7QV>'8:&8Po):*FNs=Z%KpH#7]L)f?S,joecd*&tU\?pM%6?$$=cR;D.tn'%1[]jf+T:.F?o<<Z>f=\oF7p%BT[`]mD0J3'-M6
%Shs%sjI60UCKATs=_4WfTmWhD!eIsA.*T$_^T$R\DRBT(C@G`%p`$qu+4%j^\X\8?-GGrrIVYDIX_I@8`?I2&B"!\4[Z,di2PSk_
%U=j^pW&jT6`:5t.n_f1kHQJo,*hqU@r/GC#*2;P8fJJr4DfRkV.2MI.@Zg9m59N:taGkGm4Ct)rO3-9g;t[h<6?@NA1o(M/,9#",
%W9*K0./]&a8/2%Mg(c]Z1"(cjnLl-pIq)R(/FFF5_V[aCIR#U8KqgD!Gm9(ZUu?71.2EMmUdUDZ:,=Pk<VW&Q1A+<@:S2:?j4!(S
%W"]U=+<&[a^Tf:),ZE"G8\s?j6phlXUmX*q(hpqGp_ORaH@Wclj:R'[&IiHmh^hH%(M5;G!68'M5a,9<UdW7%ADSOL1JdOqWFl9G
%niScNRJU#o@heTg3(T^j;'_6l1ZeNldYPXMNHH7UAA3"mr/E[,+>d/'Y#Z1AO2kX&=6clO7d1pfSlLN167ifr>NS,qO*T%r1\5;N
%8hc,dSj&mJn[X#7JA:7h3I+r0XP#.OAe9/`U`WY!@.eR[BWbBSYg*rhJp"ktY1>k2M:=Z7-FNCHBe*Kpd_IjlG#Ip^-#1#+b%bJT
%R%*BP7R-Z#9r0Il%"l;%hYG3tq![.3J"X=`$jtkea)UnCi15@&QiD57IrnckA2='_nBO8O/H6a'o+*\(k8=uHo1u'qIg>H?U\R.&
%cD(g<2p7Qf<e'X$dV)`C9:.`g^A843i\d1LHLk5Z@.S/p4[73S8oQ`EI'*Tro?HGgE&Z[%Xorsdc0%]<2r&e`"F'I^k=9JMhgDR0
%GJh\',WOVKK%sims#ln(9j;\@N$gCU\#moPgAFFc],#$J^m6Ods(8f;6MjKI8$s`\1G6B3ROAqW.seJUT\RT$IM:mm%X@K'g@2Fh
%+7=`L_ZCPALBtT6e:X7M]PdE,!<"<O+<l8HFR1-mg=Sk\Gk_mU^[Uijac@?-T<riQ$4aS-f<QfS2sXXu!3`5AE`P2)+)EQC*!aM=
%`tr5TEF*YXVrY"l;KD5U\X%.4)Qg>'r&=,1E:T.smPX*$SH="bJ_U?Y0k8c2YI$2T*6:c9J<cJEn<u.jP6<g6N'BaXrsL+`c+s_=
%pee_3S+bgtqu4#p)i?XX%iIM\]F<=?1Ti1HN]LM4ISsmXeJtq_"t,h5aCa5/J:G+g(WTAM[+o<!3N*.L8R$^2cK74hTjCE-I`6;8
%nW5CNA&TN[]h_XF7)jod4tAC%2I(4IiV>l_rlUuD__Krg04@O4<kjmm&R*"(1`,".`>GcndB(M172X!4=.&M_i-47oE!:*[#k.&)
%2fA7<2+LG?FG7fi3\1t2)eLf67U44H@2/=E;(VE6rjS@)EYTH;2FF"\G`uTmd;g*nH_*_V(*+4ueli*R*Zj=Md@Ll&N1T&.YM.Dk
%pC"9\Zk%")neM<?YdG?5'p.lmao?5p.>%a@16TqDc;@))Hkbo;9!?%n,5m38a;d>r#ABML1P;%iPemNm@j/bem&]lRW,XZ5=4XrJ
%)o.P[Kq(Na5[eDfc5=@\VO`9_D9rUe8tDU0>\*aPdc5Po+ii6K.ruap!2XCQ7NN&EF1,&,@a<54CirSnP<H_&d=kb<`M%M,5'I(o
%7##A6NIm?1-GBl:af>hf'^)[$[&b*rblfL#KVr?-]HZhK^)=$fYrIeuLn#a)s.+7<J\^q^USSA'Z@GP@.>rSOd6XP@OXB+G8t/n>
%+jG_3"1+6"_cgL78h7p4/k3Tl%K%fMm`7*,Obb]Ol][G)he`ct`p*Dd<uadR_bW)s3A$>A7Kh0>M=<c%5?rr91lsq2^kL`#l<^W,
%CJggJ/Z19hkB3kSHWQF1aRES&q@6(]QSV502KB,#:J)Q@2oLnD2Q%I`Ekj\L'Sn!LDq(uS_ACG?)nk6O'IZc(M&9H#*&qJ6%$JF]
%ot<_6qU5\S>/[NeKEZ"?=qnkh_&O:kQ!>Z_M1Nd09+5cJ%F46r=X59pTV%*H;VE:k'S=(U#3?ODKK%I]U/Bi&&HAGp+X^\'RP6ug
%QM8D07#:.)$ID*1R#3@K\P1#^(]NIQKK`j3`pYlu(*!5l=1=-a*=YAc+IZ0r?4[@8##P:_BGbj7c-dLM0e.A8jADItC(&e"(8?@h
%NiOY3HD-3=\"g"50hir?s.f[#X6'l)#b@SuGMK8u#cae(Q92D_M(08M3c8dbcA1;nmM:qs@JCR[5&^qCnhCF<Y>n5tlSel/3HiEm
%o&C"<i;lq$q\MmV/qc3VR@&6ZoZa#-f@f^O-ea("ISPIk<$A@=MYH-XTAu:GVZtAg?UYL(3H@5<<5'E"fgpPk9"`jnG"<-al9oFF
%Q<!-sfFA>1J!$MthT*E"-cnMrJ\<('U=#K$=iN`Jdi9l7*%)5A'AsTr,Tki.Lj#p;3Vbj28'1hgKn"1F7=t/l?XH*sBE@5W6=5dn
%U`YHr6=F<PCX<FPV@2(*&-GV[Rh1-"Mite`*<t2oPKc+L$JA2*2),Ae%e@M37VWr!O.+"Q]\f7M"*7T4(ljRCEmfi'JjObinNQ"n
%3OH.1mUGs0'LnaV:`Bi!EDq^H/R`3>:GiP3.h02t!?3U=iSidmk*X`Za.`5/^(5Ni=omS.F/;kP_)fpe@"agrE+ki\7*$/3Plq>M
%7RpsJ9F:1"8%k.0i,jL.dbq:`i;9aL_\A7(p[O,$:+(e)YXp-OV#o[\)1lQ_%J4,.PHcWu10B*cPY8,6,ZX8!`,HCB#o*W\lbH:#
%Y?,Z^SihfH9b>icW"qrJ"0VTagPeWa3=20'`fPbk.i+nMogmZmZ7nY"5P]LF%\5b=fR8gco!,o-bX6I$F3If5]rkG(Yg"pcGn'n.
%h<pf&&cV3JL4Z.I<2[!A=RnaF)4is3'(_bapb,t5Y"uY`<?3^Tjm4D_Ndc[/T*]NPQco]"<-'B*&X1OGM36&X?fB3D3RFD;._1`U
%R$6-MGVN?Q0&eDV>6#p2@:0i]Rc*:b?9u*]*;<"#jh)TNWM.cD,EhRjbg%>\jG_B,GR$>@O("b(]*i'*5NP5)\H2r^Q-t9+g+^VD
%]E#M*4Jf^3!A_tBCP:&EdQT(n,1hi3lC>:fZ6G3Yb6l5]pa_=2"*k65nGJk2nJn*7)1+n$X9!aVK8>cGAn`Uq`TP)6+&Rn8Ds(iP
%RN/2jYpD2#ch&uk>jT1=ne?=E#`<b_N(G?U3\q=I`dSB#3%S]7W\H\IWZfB7(jBe`2I^c0)@dWAT[[uQ*[p/pg.JeUk9iigMLac5
%"IW,>BfE5@ks<8Kg%6"87aCADWGL#SOn%:1s3>ZZ:tL!5MTcA6g&RINAK<O,7E61^$E4&9,Yoc*L#1lOTaEgDP+2&Ci@:?7<US$l
%3HbPhW)/.B->Hkl33Q'ro>3nBT:oO@-Vn_&QB-#a.4]FNVT:+p`c4<0K&b3LB#/cs*^qI8\YC+((YfS*boGe')QGF[4Hm\=5hkh"
%e^_-K9bnXM4,dl:O>b[i$t%W!$p"MT#0'mEZBc6MGqoP6=.GfF89NIh2J<33(Sa^HprQ#lo7Gf-NW1[I_Vj=.cg;"`qhbC__)![A
%'P`$uMb#)B.]<-:2fcm2;IFn2jO>%Y3\[C?d-=esUW7UJY!H2FbB^sE%H.R&^LC,+`-H(C/K&8U["6'q*Pqn!<eeniTI^`%/A"q^
%aU*(5idJ=qK:L#e;WZR5alZY@fGM$<a=US9&6DI'UL&fkR)btQOP4)_aG=$_+3ZEU?R`ptF&F/I`\m^>i+albo]2uPG\&4^..8ZJ
%T(,YRL7?G]`8Md@#:O^#&i2OHQMU^k0BjPGc;J`pKu@&Vo^J$c%2LW&?iJa;TpRono4mZf]a%-`Gh*NZ+*dpR(imIeEO;?RF5S.:
%pKS3P7(h#pg?TTUd0hk!R1u6I%f^V&4\B:M>>Vu:a`K6r4OeXUM/5Ac6:&^/j/CpH_E9nD+so)++sFat5Oi#Z+g7ZJUR(8f3\JOF
%<<<8Bq-k'V0d^LR[%1;A@jR)8c,"rQ,\/;W($]H<2=[D_Juci4$sZs7ZHO9\AS,b)_Betu-P#4WVd=UQK?_!s]Sr"8WrSRhQU>a=
%3_#'mHko.&n?*\2!-ht=hsgt<gk,F]JrN/J(5KA[qp\),gKtS>S8o#e/_W,u*(Yp5JJ_6UU5BP!"aF[U-kD37GHWt?#fP,9ILROU
%kZWu*n99;^)l,Au!Y0W?"i6%=0aIqn;Bh/j"ZF.E##Y^6Xl_$5&>/Y>"?+u/YM/"/*[129A+RNn!`<&rZK=\Jb=-]$g/:ukmMm/@
%+C(T"%L.re4[Q':]Sr^XWbfWH19(I7p18;ucNUe0&sgVcL19e"IAa^$cm^XFC4U&#ci]KPbu9i_/t107K.fMW1.-)C=)_TQWXSqD
%>i,i(g?U)RUFS$U':6p#W#jW>#`70iQpe$:.G)*s%;[h&F=h,>8%ik-1X;B8YPO^C49?^&+:bHsJ;h&6Q5a]67lG#A(u7%S#e4DU
%W;(/h53Wg,\p0^SK-f1FJeO:d@VBj)fqj:h(9+gqQ[=\RfC%S.$T<cqP%c;.:D<DH)%FJK\NoM$ZhrkHiqIM#C)rTOnYLE-\<P3L
%6C:UgE?hh$$L,QEmse2nYN.='#P?.`G>+\Gc>TA(N)&0<T`u;W9Tm&d,`gmbE^7gs%_+FU37JBFme:_Xf!q0o7?[Z4H2mj.-es1,
%jF8]CNFKsW`&k'm/*/r$m<<SWYZa#.^!%2O53_b;3%r'a'RW[RG%28jq=!9)`njg>Jioe>HiO&RX3GSB4SfSg6Y;9-S9:5R\gft(
%&!_W1NVXH3Sh;SS%I0(TpiT&e:62SCq-PEAEF3ct5q^)4,.9\<2**,bY+Q4]WqqajW&<_uIp2:#Kr=a:nG%%I?_qoE%R?=QI;UqQ
%1#ke(=h0TBEV;]k3d$lW]/&i12ce0%6_WeX@>;t,59[OD8c*IJ\i:Q\C@^DBM7f38]%X^i\]J2OD.7:Oi%Q+K^65f>1O>\cZ0:Wd
%?d3OI_;,gmoYNY;&33FMHAp8Mo9SY[?s3JAa71rXqho/1GR;q(UM(?3RIMegY3nKj0/!.K8#59[Dp!/jlEA9S[Y^lRDpCsC4]4/?
%/,.\d++HMURiX_APMaRZR;`'D3C!,[k=T\PgjH7-GJh\g8oQ`HI!u3Bo?HGjE&ZO!e2;T&%c;*o.dqlXM:V!90qH_^(;'@YQr\[K
%c>-:G(\<YJk]sYaW8R7Iji:Wt&g,nb:BTZj"n&jhp#_\?2Y_p=403UPXZuV!L]f\dfn9R;#!S.<cTbb,GOG!M]a%n.D)ZgDmD`l3
%cTd^NQ0(Xqoqkp\2VYY><@b&^PAfs2Eb^H&m$TnLQcdY[r9`O?9=<@AKFWq5;S/CWDkSc]$1Fee*iFG#HJ31B"s#D)d.k4VDmhtQ
%qiF^NP'U>I\)MMD?S=9/m1b!-pUsN&)nma%bC\RQ=KHD@m7n%V7#_Ib@#-NCTs%o7<U-0RZLqt-dd_\I56iO]^c5U@rjY()en^gL
%^V_bDru?*'h.jR,fALAOH_'cX;6sC9(r6LKX$Fbn0"77:6%%al!T;/Sm6"IMf5#$d;X:trNp8jgH[h\#D.@9WRCF:q@fKO/@)FR.
%BcNs;Kh;f5hhYi,(?b1Z;R_#`k2iCEC=fI!efp"G[+;1k6k=XPDDdMWo<O(rH;5KPQWaYab[Li6kZ8aVK*XPh[C(jo6.bnT_`(AL
%[<`X]&H'oTS6C]_hX0aDCf[S.3F=;sdsOgU*tuBB81jde=`;*BCVZ`hmA/@9K#Lms`([dK)T4(sfBSWE[6YX!lJXW<A,f4"ebt'+
%_j=$-VVPNQ4ZnBm)e]+?J!]F`M=jZHdQJ\'egOfZ(/.!QXj/aXkLJ;>GrGpb$?981`$+:#(j,[;gEc]Q6,J]IOjKmh0(a\haV:;o
%Ei1:7a.TOFHWjB\[Z<Y@ReFi;jsSW_5++=A/F?Q39PpmEK1JC6NCUdcRE09LIF<cCY?[XB$Z7ha)h-sK,A8h]m:rP#O(0LOim_d<
%=qd+A3@T*N`HLp$%g3cjiXFa@M`>3%AW>R.?Fa;:],J`BKTW0$;knWjX[+X"RC!I_*S'G[B^<QrBl$79TT>jUZ3.$H9emW\M3""@
%<()D5rZi\WX_PHNOa7GX"K9et\\i$_?*6BQA1WI2)b#7K:M\1c%BhWYfoLSCN2`usb0)i1WPqsl2`(mL`$S:<@D7&Vg.4!2R3O'#
%lt20/,dX!!bg&g9]@1p0@c@1,B!%9XG*0^:5IZPJJ=+g80#drd;S+3^92`AI[>Q:T8aZMXWSN%KE"uPKBQ5I_Luh)m\C1o-%1L&r
%'Z[F_j3L'-hZeHW*!Qa8Z?>q?E9p>UNbiB%S7ID0_V*,ph_?="&:Zj7QIMg7l:C.YL6g6kr74d8g47N=^&_T:-IYL-j/`E<35&.n
%&OU**Ek-DIX-_gjO$;W=ObH:s:2>j:m]J2PCK4$`HnS6b'uHLWBr1YjV&uI3X$=5_QJ+(B9?*J;8Y&nq(.ShWV0[D'5VZpZ:o?b3
%,``dK?>APf7)@q!erN$I$=P[=96'[c99i*Y%thkFbt"=njk!s4X:i][<2O@WifJ.X4c>S]8\D%"0Vq8+16r$2_/0.I5#PbMYo`,I
%.4eKie\>lGS566/;Aahn22k5BF^A7%$:[.Sqpeik:":ngQ?o)sXjkFPVJ<PV5Znh0p3NLbpcR8^Ke$]R>W/q&qQF.b?-GXt/6dZB
%25@]:"#3E$(SeFm_K6pKe2$?5Xa>M"mD`9^F(Ne&k'CXr[)H-+(NHP0Ke[H9*';Z_MK,6@ofl&dI592_>Hc711mj3],j0.liefqn
%.e[bK1>T(@c`5(1C$spM/<W0WA.L]R6iPV_a>'hQ9(n?p<LNeKA5[d075hN4QqJRT2bs(+D^rA)]R=;F2(lireg:45X3&(qZ>Z9"
%)p_`r38$5cp5N]al&pJTh^"4SmI[b%kK:<F0`qfh_]!n!mLXum3&+)Kp'akG2)<d"5lBMqUN&XQVO!Ccn3F\\.7C(RL";;K/\6C1
%lh0C)PDQ@#(&*6_<c6JuD-d]1Qkk7XX^G$Mo@(e6YE6$CDOe,8e]%g'L$D.0;5p*D2u]s;ldbDm]3<m$[S)UB3t=jH/1I,9V6ct>
%Fp7?#eB]=1Rst<0,k\K06B_2u:[4/`A'_:L^Y36Pf'Tqob\?=-*J9ks*WCq!4q$=E\P/3j;.d<On((pJ2`VIB1j5ZFR7js.LG(nL
%fNtX0%2PdV[&>hf8CeQd!27Fe]kZA/Te\O]A>]#tcF34\$^0-m&K!>r$89j]]Z;i9(LCVeL?^E`i?]qc,__S\n<+Jl,$dH3GY&5q
%8`:sE]L7m'rPHbMD"ckYo9l!Jd\0?ZOp]X]<KJ!a?56NSe'(n5DXa+YBj.D0^0sIDetm!`09@&BmSu!Z->h/u,9BA.B)Q<VnIOO%
%rf&DeguMnpDc@<=VuCHjWgKf-9^^u+GfL\[`b+'^0#CnaY*a^`]Q6d7ij>)uE?=l/YM`WK4#eO1E15KULKL>W]Z).-DBA;YVD#_0
%?K2W[4QLVhmW7OJ&PUjJ7UJ(2r!Vs!->`J*ZM7I/GUG2gi-2giR#ncdF%/SFs.Lq_([S"80ci#0a#C\6S3h(5gP_K*!mT3C::6#/
%Dc\GDpB9[!-7m67$o(F[,u.iGRI00%=5lW(PpqHD]N,fgGjUKcB=?(9Bt`3$n1iSgPBs3UZ&rKlZW/L,\j+cRFKC#N8%]4Z(iNT(
%(\>$&gmI2joZYK6.\bqIjXOGIkJ(u6d,H[I=V#/JUNLX^WREj\<LWsK(<a/2pUPk9SpiJ1!g7p,23N=_c,fSMs.%-@UiUFWW)%<q
%Vj=4u6\U_^V5A^He.eM#E`:rGbZl`bghnKrk`Y-PM%6[%Zd/=4G-5dKU&X->G*8M35(]LS-Mlg;8Zj2.fq<$;CA5gbj=s=%8[80h
%DBcWCHitJ320(Wf";^0.@WDYJ8>A;JRH_q&,aVb%SiFd/3W98S@r_VG9_lZg!qP%9NQD@bfAlS+\^p'ekDO9NVCC/u>tI4qP.;GX
%1dCQ@d94\i7\$n[j_h'sZ<<*L,]^MRHJs'4'p=T'm?:kig5'gbn@=DCdoq]9\W]ph>&79TpON#uQ[]J&:Q)[#HA['>rT-N;EY"Jl
%hm&d0&Or?-;2s^H\(3-lg@4LAJdV%.C@t]9ojLYLPt\P(ZYdf;9@-t'gH3W5%G+OIr"o%JLJ4S25/tu<KfCZAT0hkhR"J6,kd7MP
%M<?2CUs"%,a/uc&2A6IED;Sg[lsmkpkdeGu`nhnH-@9ffS*A_J.n8MTo/Fipqo*d&R-*\+j-r_M=VmD0"uZjriYV$%h%bP+RC?PT
%nMSDp]AIN;@U,]e2[2QDa16M/*olLc=n!]0rf(B4G?Si"C[FP?JD?5.R`A.]DWrDV)s3kUBr#4fpkdofEQaDkfMf4*`Eo<e0UHB^
%Od%EaUpSXGX4bric).UTqViI#lr4LN:l9ml"<Y$ENQu7.-SWc;c6F'/N*`_*D;g?o=,Wnf^A`-6X,<(ga6sQI*I5iXlSi;[jtXca
%WeHt0iki>KZ+QbJ/C_S$r^2a#d2i$B(e['c"Wn$a,NN/&S)5gUakuY5e_mhp2>B0pnQZ"3cPB1aqTdh]hjLk_Mf/7Ce][+40ap6*
%n56IhJ=j#@;d11q81BhI]us`q'IVAp6_7UUU/F.V2.GBSY[)*G9AOucID7K(Zq)^ts!dm`AMEu:FLTb[l),D?=sVX6NG9o^*BVH@
%H?lt;-]JJ,:5c&1JOOg?WR5&c'pD^%5Q8$gKEY4+`AsJqW`3`hg.8j/8",K"/ZM3toi6i[0IkO.'sRhudrt=<Ngh6"ku$HYaKV+Q
%nuHBh^uK%L+JhQp16s/u\O+NQ?`:AO)\0-il<2HqOujN;gkoC9dO>nG%=FBs^)SaV3p%g=2Y_:?QGA8QRuCaEr1%JK=k[kSA,M7V
%JGt9R[ALLmY'^p>=`ZO7k$l88Mn\=_YTR(iadO0^k&;b0)Qu#&j,Gl=r3\KKY$D"#-!%").59%_AA;f%oSoQBm8Be3MmK1P&>s@A
%G+7mMH*c?iMm<5I=MA-[q<Z&j-'iHZ/7/fK9e>1OhX]osG'C6dr)9Z7HM!E>S!M4;,NcWWn$,5Dij?d01ZFK0k8k37c8lPW:,5Q6
%oFf1L&/PV)Ntse8\3P#gi&Jb^SkrcReo@3Y:CA3p`-]#Ug`4a8DEB^G#MJ;>.f&#Bg'b9@(?BJEEGj,[lZ\ahDDF'WX1\Hu_!<_I
%2r*ZsM"_Hl`g`9OiH$pnlcGA!@_W]OES\asXT.%9ZX+<6(5#&^Si>t=/2Cg"F,'<O()d.16,rr%*b4OqCWTMUPIP!'714=`1U`*O
%51W<NHHr/e805i4P)eUSS2Y$_(2&DH;4bpu4HX\M*m#'UB?E6[@hO0SNIuN0bt4MF3R@9+d9.aXJWebU?26TQE`D(&)]Nj^N5`:t
%2*%Zk/'_[VNbU-''>bMqb;2/aZ%,>&k0_Xaa&pQD-(jW_m08K%o-9JF=.=tMD6^8"0Gj'/%:-mpBBIO5`$&U0:S@W0.iQOC:D^.-
%&`]>*UnTRo+]hRhR,t0O+;G?0!@f"-BLjTk1[\t@MT2`dnYDnA<&Ea6U7j/:73`R&F&UIgJ9t-E^munQA(;"!Yp\CD6g)e4$n<7*
%c1g:>SE+R@Ik5^ih',"0j*>AsOW/c4;^5t,nkC^</ah*$@UsH"F0R!-K?qN*Adk4m=(/P?:l/iVB"f[Y>]#hgHV(r<jEjJ4QfNKP
%P4-AGU_c2O>JQ"S03lL5j/DC9-@@Nr9+nraiCaft,iMB/^*MYFE[6'q'#"O]h>AIe=H4\j,j1YbS58YQoJ+\0GKZ/IQgsP*MX70.
%3cV^G:CXmdo5<%IB^$Ac$s_tp6*n.II^T-aWCZZ=:Hk4)1U]hcSV8n1M=I#lit\ICO;P1Y,)I.VkhK:D7Ar,H/])?eib6lT/FYZK
%oZ@5QURf>CKC`QUZoCg/:,gR0R=JF!`\Fp]PFXs1gYbibbaO<4EBJ<VSTtk.\qR]"e-f^0@P*Vn^Ctl$^$<OaVUoo3jqVNc>fBl@
%Knt?uqeE\5;PR*k+'.^XEkJF"E0G"`Q\i!/G'3Y9RnVMijD1;e]i;.@<ZBlN;JRmjc=I<nMm8s8(R^;L;ZBW^+8*@/P6n+IEIp0(
%3&QU2U\Z]05slX`54_'-%#N2$7%M4Cd-coM'!lH4:1E:ZF0dpe4NV[dDtau^_9DhW:G+t93c.s!s,0`54g!9#n]iH2V^Kh\ZOqhS
%;RtSpm#B["%MKOGSebJ*qELeuUB6p6X4T#3A"#j+S/+]h>,,8YEVD@^?-Bk)3-PW8Th^NE(m[:cL2-4E7)WV1m)P_6OmOW0:bh17
%<,17Chm#`D;5ZjJLp=TBEGbj"=Aqkj@ZYS-4cAEi-/K&#:8dLAAK7=1BN*B](n#\+:7g=4Eb80`e1P8,bgi2O_#iDR[@EaTRB7H:
%D%U[#)FpjjV0nDq7%'nJCjE9\U+GdC]OKQE=guCsN&#m'(.HY0'5(2%(l3HW4`c&fV7]?3;&7$=`EF7fIhj>"Lcd%t;;s-hj=EoD
%(?KabS)c-CN9*)6%\PB8=d8J$SOJBHhIf#c8C!sRN.!3(B2N:@/4uuI1\7Yr$>35u@@(RIcd]mrjV8JMR^/IP#A;":iKZrCrbbLd
%5D$Dm=\Nl@$[#N<\s8[4pt!u;)`&je1f;&[C4!>!cg)$]DXa?WZ[0UKF`*a+<D.\HgWh(!mcP!aN+\>%L+Y3&dl);&e2/n%^VS:Q
%c"u_"EM68"%3E=gJrX1r)uIuT(HP`(POL,p-k:auk8u?]f5BX=GF<XKYkt2%m=:^51n+G$kV!Y$;Pl`[/3GT3@P$O_F8u,mFE?qX
%UCp\pV;-?qejqMf;=XgIrXU=#C36f"DQ/#'ok&25bEb2sEo0^\k!aE?,D5uon$OJ4lG2ZfSi"%aeT/!%WE/4e7[1!:q]5J#h2af#
%cr/3Kdl2gUPL?kgDX-7p/QMT[^-'1aiOsjAUJdmQc'C\Eq&0?fUWTARm[)Y`8@l,"C83P8(ZT5&*r8G^ifF_?HI0XpR?&^?f5+E4
%[I,FUqA]GYPsALP'^)]Q?R'p4-fQ5l+kpha;bO;Ue\^4o`a5LIn/APk1dRVJ^X[?8-c9;k#WKWGVHhTY'4[LKgVh_k`\oQ[2fEN'
%`7QEV2DMXA1:DPFYI#fb`s276/Q:;fTF\ISn:PH-[V!>\?.1r@7u/i]$U7amG9u>D(">`Llucd@I=(?-p,]J1M7pX7]s_3@F$-hK
%No>7s\4onG>r'mG0O-BgoRgc0[1*?a_X]N.Z.XuYrX#(]BSju/Cj'9oYAU[(gOK8Bbck]I\j407$/KR)j0V=BH13u%e;:%$#tqBJ
%Q9);#M5@qtV:J@2:r'/X[d^6fiS(k3QJ,?To\bMC==;,b-]GHq)!f+B-cZ#*`Yo;j@Cm$#UM\I<F^#("6M"IW@(:q__)BlGFZ2&(
%M4))lRC9698gdY#Z-q5P=F7L@aPqtbUHR0ke$`O;el_H]1uZ%@+YhB$M8#:4rWr!kYMT3t[aBl<b>pd1d4/b$IldO<D*pHYHb*WG
%\;0)%DE-d%[dHFtNq%d4foFM%ba%g!=8KH<9<gRMKMRWrHuan2q?2]Z5$7Rb]\p+*?W\4o(@Zp"a1aa2Nb'+5780#J],2mJL8Pp!
%/7%'G]\O*$0_$:\^e==OO\Z55$]RdB\GG9-n,&r-[G.f=Fo*OfO;kLWd$^Yp_;)GKRuYe_MR/WD]M)RWpHOs8gdZemZ!XA#YGkY/
%)EWaED&5E]Js`TQRci&)CsA[03X;BYA2d(ml/7\4M:C!E\uVa7O#4U=$TN'$+[Us-A3>DsSU/e.Ns'1^7'P]dVAIl^kYelAm*bKu
%91-&`:2O:C"c4t93uWe!o[3;DAm58SNhAUmWb$+q2g-OP1HjsgB+C"Gff&KfC!`i^)$/F;_Sf2l>IZ$R"^:6Gj@47/+Vrfp44ItM
%-P,5k"[;T+0bgV=]b'j$\Ut5p]-JlD_Odkp=:VD]Wq0GT%J^9Y!&Yl[9[36d'o'q-9Z:P2]MLbT`&s79+oI@Sm0SPH)$br9j@5N4
%p_lt=+Z5Pp5H"gs</G10TD25e@+'X/D4:R,6"+Wqda2g$=`(LJJMnH.%SQ0^1a^L6&c/TEr=%m*p^c2lG)4<qLs:V,Ske+1[cc$"
%LZ;4^Au\g)E0nq/!/erPp1t))E6tq1=bR8S,I*I'>.WYbAda)5-/9;M4E^o;!q!Df5\-a'O>>IWYc+,SJq]G`GF@'Y[3Rie\&#^R
%1=Mn3)lMp'=sepCWaH*n24o^1o;(nsOgJ=,ru_uNO]CCM*@#PA?GKVI3[T7hQ>$rmY+q+KRD;gdCl^F--GIq6(Q=$^0O1-OMZWKT
%^L'bmM5r6GI@FdLo>L&:Lt;d34:a#;GWG*&SCLNW)&q53)9`o@'Y#'G#K20MEt96/#DCG5/N[%5Q:@sq%q&CiILQN"9ZpQ2H_'5i
%N3!Lp3<mVU=C/cgU;d@`c2jq4nqO+_,W#a#U)rhj$-OPnL#4l1J>o36Ut/plFIQR:ULRRIVlu?,<E#/)e5USWdkJl")Sosf?(rZ@
%g=3#pI0N>:"%uFI!\1.2%03S>HL)h<[5\CUW(p&$&,sl6n"A-Fm<XqWd*pok>cWES!$r4f9JtW=Jh2aR2AA5Lc>W3)YFDK_#$F1c
%*U6QW9d"5,9L!pOO`f.W/XnJcl4KTTB7jU3%p?&Yp"iHGe*W'/Y7Vof#?fjJ26S[_2?*19a5on!Na;Uun267/cqu#Y3qLU:%r_*-
%06Mi0GE3gq!!]\&BA^,'!!lk4)tEUbCK1Dg^KU;SFn:M\)0JsFh;bcl"5c7J]%?-cs'9A`2C;`J%*84_`(Pa]fl[)jS9n;-e/B&E
%Hh+l.!#Ja`=RF+R4;H*hN4q=d`5[*E*8oA:jbrEB3ucO?'^Dl$MP"P"fF,I_*ljIeX`P39`q)0L37=A/nBiYKH_#'Gncm@U9Mg!l
%e$o=#Hn#a&8t(4(._=Ic@GqH>-lAEJRef+sc/I_rf)4t3/Cm_eSGk>AmX5k:8Z,lF09-ndR[/8E:bC5<;#F+kdN/"&Q%"igbaC0@
%<Xd-rX0o;*=GFdbSI+!s;`=/pcoh/`d'FKX=;1/Z6PK5L,:)MgVf3nE-d=7H:HR+UmU!L@j-cStRGgUk'0hRejI9RhEU.j-!XS:2
%1GOs6C:@/naQaR8`r##Bgoe`h81^;>@J<uuCqX#S*&Ur=6@B77jjSPIUf9RW[X.V,\psN`gB4g^iR[s7URHtQeQkalAm<kcIYe;=
%Z!Jrg;ehiq8nZ](I^@R?WS&,S&N'&VV0;U/=__#9A\<)5b"/)2X$0l<,.INpe/#n8UJ^^68SH["nHLNN,';S97]07$j2::mEj\N>
%;u9oZmK>nP%Ttn-9e80(Zta=:,UE^W:pVln-%f6t;@2F$f'K]l\JV\mSQ<'YLf^V.6Esm04-f&QS#M$<Vd"!C"Sq7,:o.d'Mak%#
%dHl",!DQpc,B.Fh-9aR68?YqQAJj/p[7[Q9)]2-WRLaL[U(FLNn$!kt[cs5EZ;T.VWUY23Eu5IlpCXdiY'-i4^T4?/lG).STi13B
%:29H*pW)47^u>$6h%m4bZ'0u9*E7S)]l(bl_^<"GcM=7?JMDsa?q"I0\(UgWdTjD`:arDoh.Fc#Kid]*m\KMtpq\R!RI+Ie?<:XL
%WOC2H^pg*2GJK1Y<pS((?"a^aY-th2*VqhNjnZDJc#TeDe*b*`@iSotLI4RFSX)>0=TI/YY;N>Z/k@JoeIJ:=)VnR(ejHDMZd0,P
%;X4`B;&#`=!Aa.EYCtVlg8Y'WXXj;,qJt3nI^Z7uWphH>O^g5EKn$^c&KcWu<k/`de;VTD=ppVr<Xo%^eT(lbl9o<0\4K?XH1UK>
%]7n6%&6kB=%l\0ccE@+?:R+P'9.A6j":(D5a+n&Wpjjj<9&RB(L<gbIW7B6t,d;a'`uQ!S,8^0!rn@?adW!$KGSnA9%m/TnRTNL*
%2^6gT(q&.6[F=;5q,#rTGlREpN>]?.\HEu)6\?m:2MbPq%4,[BYu`On#+/&U9\o\Y$AWPcCC,5gr%:\=/mf+d/bB`%&2N*J=,2!P
%&_5]\7JL"3i<^Y&rOa*o#>o`+'$7QRZtDdH'2`P3+RCr*j("I0W00`W]'[Zs,=NIY?ACri&$t$_,9fpZc&ncV'DV*bgi%PfABTV=
%NmZheb(j(j=;2m;62K.p!If6-B8s-r2b%3'.Q`dGb1JlaZ[#`TO&I2DZ.(e5FY?CiER`Lml-$k?7B8"`3'hDdT5q7=f!L?dR%hK;
%,*CWFFL,6TX&\Eq'I(0^:%V#j<5'3)%,IM,00!mYrtj_sO_Ck/V\U#B%+"JqX`R%a7\\940@SsH9D8('gtr%%5\[.OWgA3o=n@SO
%DKNm51E^f`_@).#,:3q1W0^[BW0E+u#\]c7?DJa\K.s2Y$*E6[W#__,KZ6J;Zo#e\JjOZsh-^hk%2!;_&/WP;`^9jZ,C6BOG&uGJ
%,FfF+9d_*l^oZ')Vp.eX)!sS](1'IoHmF(2M3MBRF&Has`^r7b#@)T-%kN,3YDTfZ\%u;&kVb$W)<%ph8C&aG4mD4dDj7>2')3;>
%TIhY7+$Gg*=:17R_p6.@M1/TB?ZZLNN.E"n,R/:6-;dZ'D046lHH98[8WT!;mF13:9KS'^l(.Uh_2Qfq%ZhV4p5snp-[en1^iGr3
%Fjc97=U?>MnQ6XG6X\agmh5s=]O559Dfm)t.uglaJ-D&`7emK1<cK>;1*c44WD[S76chbBg-C-_PS<o&Q0qElK#5S/>.Zqb+QHn^
%8CXshe.IMb;hrf@.+nf\S-r(W"j]8Z<(oS,"7>\<;4,U/H(=+DN6XEQ'1Sf71.R)U+5ipeU!Fnt"S5YB$ZNILoM;)LR4/th6?L_[
%Zo^"t*MK%t)We4FN3Gp67^G0O&%O?]^\YN$VT6EH,;Pk#$qH1J\RqfK$"S&Eks<>];P08`&,/u5@9_$GZ#46DokA]9=hfXZ1`XG'
%`Pm@\NiLYIVkMTRBCb0-+(Jfu!41?A+7&q\g?#h)C,o"/-[hsr%&6$IFmJA-f;V*V:\Cj(asP[,n8abPC7,FZO02OaTKE8W&]f+?
%`\%04hl)TW'o:GOW3mb,Di>>EijHViZo_9XiZqB0O8t_/0nE3@d]63>g-i:DH1PPc@^Ihaol.aVd1"/jWEOpH<1%n)9BbDR[8Q<r
%L.\+I'8,DB<+^JT`A:K\_ZDc_q(hn<2I$B[*ckF;bK5@h_8q3GiU4g.i*ftQ:`G+3'Y"i)-ri&5f6naTi>Pn.ci*)1\9ijN\]N(D
%;hb1f.rYm$-aAU,N6*_BT$4Ef]Fc,nUmN]s4\!pVrBWkK.GV-*>HR?qgS`ReDagTucOtJ[:X)2t;PPH%p4MK]'Ig"^4%N8Hc)kXm
%@6uK9HAlJ7;rhOFk.$YT1f(-NrHqHl"=AWC<gRCM^Xup[VtTndYhD'3^FG#d69?W[N%@C@R/^P>@YAbERk'9r?Wq3V?LL``#6O)"
%jDW59OKZHuj3[MA(dj.m5jZB@E$(&"(d"i\5&/\%GL?$$T#FH3EH1%ZNnU=1CM[g`HDT>C2FqXS:e%toJdU%cAV:>@@S*:VC_<ZP
%MuKrC&Zq^.9NC1?0jBCNU@'iR27=Vr&Lj]tb;9T'AaZ&-G64=S//c=aB:BhbNoQqr`3_f.r*m)%X59,k/IbhYKLlFfCK^4g6>amQ
%FX2n1oYoneXeoWs?#l'>N%;q'6c-'LaW)&E$cPQV$qhb!et/_;/3qbc2)T.hgGXXIK-h#irqZc!"KF?pW/2D?&PEI5K[jI19%><6
%Q4rm\-Rs@IW=[O\J@I9_9oS9jV,1Yrau32s3uWR_^(?O-r3!ER/-'1lOg"=4Yl[[0,C5U%_fo>L_k994q@o5E$$i&lLBZ_=W=uuA
%6L3,;2"k>q"2#lg9olN[b512"ST;?nRZo5m)7H<FPsU1."TSM1HLdq6r?ld7#8>6NrV!WW2ATB(&G-C`m?+@EO>1PVV9<j7aN8`=
%3<&I#(3*L>4Y]!P\DTlkq+lX(P/!qQI*XL@dQ?ZchM-6*`XAD76/ZTSC(gq-5)6WNMrPfM*Ru*'%gKD&j;a`b/l*C^>()"s;HhbU
%nc%!dZX+T_=4$+N,<7]&"fS[m6&%Ng7(JuI(E+_XC%bgfm2["tbtCm%J"#b_^+a+dkq;sDPt=R_R^#!O0X`;eJuqDX?B+$]FGuUT
%jPq6?oOa_21Y[mE\>DRRM6due/52fh]*YHh224K1bso$e%Q%4]Q"$7ke=i^4\_T@sFa$GBWd]2J(E1?%'AL$bS2k<[Aa8fF#D>.f
%HJF_eE[)CT`$K_(4m]*@-e7_E\gDI0!pWWEXnefaEHYfQgrWfYGr3S\b:+.P(tmbb7G2nbr^eWc?!iUV$D[AJH%r0mT`lE.UBaM(
%SATW,Qt4^-@*sb8ipiIW_#'H_qOPV@PVA=DNh76[A70:"'O\ca];V:+E'seulT6o%8+,`B(5KR:Uo;u1*[&Yd`.U7`UX0n7(`Do1
%:6jh!U[VlFoVU(s,;l8.Oh4h!3'9,pO%6^Df[5Xu%&"pSO0eue\Pe=r[aqGl@bS)"-oY$s0Fk;2S6okGWm>sCVt=/hL;0ec0O%I%
%UWd.aHeT;2C)JZB_/HG'HhT_,Cqb=>J"uXRoso?dD_8TOIX6:RIb)%%]Qe47l$fd98pB^UYFcQrgZr(IT0D,>SuhC.]"bl-mZj>P
%_:Wo!lBZQsdlR;Cq6O)gcIU"%oRj9jeQ-=`o>5_X_ea2VghJ@@kM>LXZWB4mRo]29=*sSLS56'OT+-df;gAlU3r.dkFm$ZkDZ8DR
%XS$"=207I+l"%45]B:]*mG#<`hR`;:qlP>I/I[h-eXiC$p3+LH:7X>I5(:WojjJ':NuH#Bs1Gab;>e)7hFV(WjB(gDMG$_qV_APL
%X8!FZ-\)!gXcol*e_dL$B$\*"F6A24a-!S"nn!74qpsnnqes"iQuj_Mjm5VR52H+-hl^eQb-&;4mUQgZDDueQmn/id%-)b?=t(91
%imgrpgcF<EbhP)EX^keAIU1XLh1&_S<I55t^Nk;*I%sq!?/VX79&XmTS;5\'LF&j(]CU0Yp>pQG>JL'rr`X[1;_PIuGjd^,Ye7C6
%r7ls6m#<rr[k`s6rQCHr],M9Ob>416Nq9JrC1c2]D11MT?2(r^kFZtT!9]mL<TgK`<RtrrLF!M;^ADSXD7,h748Y@<_u$":>Ij.G
%gM[J#T"s*FjgRJ.[i[]Bk*M@X2jKHi`l[VoeF2G;>p/C:rSTSkjeMe*Iap\a4jI@bgM9\Qhc+bUrU]F4r56tF^#H/Z%rE<+`\5&&
%08'DEBIA:H>P,tYj5Qs6[/%0"K(3o_Ks0:$n_Vn&%=Y4W4FUO;2=aPg*m'H!52+ejI!b[CV!62BqV01#2%3l(TDMR^*)&Y*H?=[>
%<Jt8E<]5G$m"Pr2M.M1@^QgTFq/7eZdt]Tj(J:P$GI$qalW;sBh06%YHb&Klrq*GgII$dnoeRF3CV;qnAqkc=.j#,=qT>;/oe*RP
%b^XtdS?%(E+)[TThE<CO:*8]8_oH+)kFg63#':Bj?bXVJm6#VjbV*%(0R"57GmU,NFBe!2.o5#d^,&?AD7?m[ERaq;F7d-")^]HQ
%\KO]r@D$C5;I(<[$JN\^*E3@f.X03tYFA>Y>4L(-8U@W:FgIG?*I4m#P&5MP#3FC]gota_0N`apS9K:t-_r*5WolH>1WRgad[SLH
%f#H>$dcl[37b^'%?nC42ZH4oekD7qUn>aI(H`cDb\UAEo=P67^"+>lGn@hK6k-.ZJ7GWRGFa4LR]=j^r4"k]GNUlCfN:Xl14",m_
%BD"33ScAAiYdSl;7>]!qW4p?h0U\]lapJuTa'LsAoDTqK^4[EAHhuSZKuHtE1ukRC401X%rSmBsIA</G+,lK*:VYmPAcgD2Y4?;3
%O;C[C?JBfo[O81AHa?>>jr]%h4ii*<<\C`O`g^T&kks6Wki9X>ha+<Ig3dTKn#\Sl1C'i@pS$:'HWb],k?OJ$jo"BAB/[uCH-RbA
%nE/O_A^Oq>(S?c4imueXGA-H[k"i)M\!bilbFO*pH^TM]O*12$I;P1L>Mp<:QiNiU>hdJ//@B63c):D9aOG]!GYeaR"aitaFR.XP
%YH[Z_qqJpX%"*s?^!q2M@"QqH+U%Q*b/SVf'^U&>[`IaIqT$h=fB50iXdAjp[J;A?#*c<0^`MjtbN^0qa-jj%OVN7:aCs$&Ek0^Q
%YMWiPKbs$lpR=tPEXg'7;7`kmmsa'??7]@ti)_5*^!J8Irq--e,7cuOHOR.,<Z%^+AZ5hC'1ORqQ7nQLEiS4[ppBDTF!K@CNPHQS
%Dlk5A4ZS$ghsu^MO]uiCItEIkmYHV.bRaCZR_I\=q*cS_Vo*SmfhjCV#o\OIV(QakbLo7;akhh+)?uZAEljsGi2A`,Ouq#4;tKNN
%W;6&QhBlXDIKI8JB#<?!nX$t+.7S3h$8I*7qVhEHe]X:Q^g%kV?WtkJ]rEaj,S:Gpgj6!q"]L]]+!3"6ol5ZTJj3CP8:>I@iCT!&
%-B;2a#6(F0Pi)35M7Q!Y)5/*]FQ:9@SM4?#^'sUk^7\o/pr2;,1DE>G<$QE/?V*OM<(e8:9H,5s)T`$Y55M/j>-1Kfa2`V'@XgN*
%]>qR%!g3/6QJ%%!1-RB:C<=P^M9Tu[KN4;WqBfd+#ZkU37&;'0^LQ7iRc[7-BZ06,/9`[W,dBmlR;'%*EV*gh:OOFMO:\;^rhoa_
%n3Q4#c&5&2l[JL4npjX`lp&-V"2*gM:@[Z<qt8sN#AJ9q>4lF^<>!%#*JeA!(L(fr^HTik^)V&+aqrt(Z#:#h(o"W,3o(+_+tIR\
%h8*p05NAH:k0MVET5[K6^V0OoE-cs.R!*iBc2AqAGMYFVOFQf[HT"Pqp:-POB]Sor%_oAH0Y"6'?0_C+XAEZ:r_fd=Dm"L?2@%!F
%pt,(,86"KR$K]g5LKSuS=::skHM6DN?[Yaq(5,p,5X"R]!H2Ljp;u+uAU!+S!qKDdJA$96H-0RM:^?G?BXZK>\9m]oK+l-&$=\;N
%iFe=?(mta8:d:A\`5l1_39VmX)A:)IF^Kn$jW_cRgj6R19Zl>eh$Y)Y]mH?I#WH-kd+,uZ*gCTDN9f/pr/7Y)+%B?rahHL*p`TJ!
%mcQ3Vb1cHb\eDo[E2l7Ys4Dd_c>S2R8ce*/nNc5.&S)g+S2^,3UWhT\(SLK+9Nal<R>f9KR&,j\qglKlSn@<^fgj0o@$i'"(nPJb
%0E:\(DACaUX%b-pPi:)+pM&rs'@0n9Y[7%t]/(Xdft8ttc-smFI;9"TT7,>7#>b&PXk1$EREcj:Vuj^dX9liHj28k'h"djPlS.AZ
%A#07!dm.jjX[)ShG6JVErDUmH.-m6ZI*#\3O)>,.pc>U\="`eWMX#Io->dCRRtXXP^DEgCjn",Z`Bp>TbL<ue?+R+EX*5V6FIi!J
%oB`OVXaO^TrT-[4e_^28R9)$PhdB'Z^3KP"P\b6oe!u?QahG449%T\Yp8[M2U"/]R)#[MH%E%t0=kmc$cX0oB]5O=g#TMK]NN\]L
%k-S&?[iOa]YEaO%[<btM?[^b@eL--5?S^KXM`(Nm,O9]fQJlY^Ye&BalhRmHKB6)@9\3K>J6"00E*!:`iplTAF/7@Ag-#2ZfR!F0
%jkfk0b$balU%aPr4_1UK8fc7/o$?&$^.M*=esflta,K;ejM'L1/Ru]Dg`r.V24I/ffaR/1j-Ob!-Ff!X>ATnnC7UefjbL7)&6'@X
%k6AMV;%3g(qs"qVF1$s$rFt[gSP[m[pXW!E!mC',]9sK(oa8n5d>O?VI-&d\<@YNN(SpXu[!_;pD0AZic!-7X>VP)NgY55-^&%D.
%<O1oCrkiP8I@rs*LCK,0?l0sVj_OU3iV:UPO"gO=>?g!k?^?'UG4',ffO4U%?!rDrNBZR-E:WKcXZs*7qu)XTI-JLlc7jchhX7f^
%qu&OM3h'`T>55CIEXWQ'#25Ztj[+5]qin@O]N8JJhmsdLaRRO0>FSDphofqFeim]bRs4,@WsAN7R=h9",-IEI:Hpqo$basu#;GLP
%*^._cJ)#="&]b!HJ?@ZjN1.J-FRRL`nbDgkp\@`q=gmbT=j90<>$dqb-a3Xd?C]ib!6t$4g,QceGTJT>"`F"+;cn<QT8*:bb,]ZT
%rNc+Y::KO"]`V_-]4H21MO5)i`DLr`n%8J+[-`oM2e=)FbGDf<m^LZop"K@G]+F;1Ar?EYcQ5Idf7t_S@$lr"c&\L:@D-sE]I\!f
%%A7N:^FW_gh/3,Pfg`*JgAIUrR1su0:_Z,Y^$IqmO*KQ0@l'oR[l`MPG0`1]H"+O8RX:HLo41*PjPEE(ejg"F^E8!%\%[X77bO&m
%"qJDe4$V3n8VA)3YY\]Zp7pXAB:J_nNX,\s.EF0ODrjb*^G^/@^[;BSDeh#TGeDjk;C%D7lJ>jRh"#Va+6o9-otlWhNGL*bQHQgU
%/oA#J]H18?Xc2k^nhP^[I=55m;!m*Y@&`n&IK'R^JM6IJc1AURaL$D]nY7N/o2@>kR+@JgOK(ElA=HG"ia$(%7iB?/TQp#eJ,60t
%:7A;>SF<f=`E_Qs=Y[C.G4=kD,CMZ64hSj(ULYEngNmqJ>q0aS]:nJ>?,$9hf)".dfp:B-+&aUE@[MbPr.*i3]!Qr.QWB.HqKpnC
%>2R"uH0dYALAp?4LQ2&BZqR]mKasFD?\+5b]=7IqoV`Skr3?45QVS]&f!a.:I_,kSmdTP`ri=\mafQM3h1!Ze\.t.>"Fo&OK)>4r
%kLD4m't^MIQm9rNHMM2\3h?368[5M1I-9p5d)bt=Z^6$"`N[e'q?u*3`<QaC2Y8:LHIcAXiJnuA:QO4k%r/#/Tr#9Tq>BpMh;YOQ
%>OC0P](sfe3ut$(*r+-hA_\8O=3R4!0nX&5nf*N)*%]ufkZ,:emTWCA`5R$$l/TBULc[_g/%=V!+$+kc)o\Z@b$.P)5G>K0Q`k:U
%_*k$,''+lJ2NdfCC"X6gNOKHM4oL]"e$CB3j%h;92BTDGLDQeENo3jt@>L%LBD$oUppF,CLp\&&ct)>P_[mSXoh3[lMKDaG'mCRM
%Z=q&#C['pdIbi=0LV$!:_u'C+1NU,a@Mn&&$[5Pl9+Y':BC!/[-MZ/eHadH9ffneiZ5L%Mr49SmL#m^3aCrSWi[[j-Y?IXt^+Jn[
%cW]3@nnJg?4e&kDl2.SDD*P%^A*),0&'mTO!]Ta3>BdOD:o5Bp6uC_IE$"YuF<%BcSSkla>/Rb*h.Oo7[U*m#*Q[h>RMKr*-\W4N
%o6r[5QX/>C7AaCkih"/,h!EED#L/fWIWb++70QL(4b)16re?0<="+)[ItgY[<kDIQ&"X5"+Q&e3lqfaVEI)p!*b>$&ll\]RL^J=A
%IM^EXE#`I`TX"$qYd/J&"aKfRD&hEm?!*.@m_I2gFO\YkN'I0nXj)033?4\&p3&EA!TI;^SpOW0^64+OH//5R"bmXa-W9VNl.,?O
%b[=a@XPI4?Pd.C..N[1`g0cW%qNga@XH7FoG.P2G^/eKb^@inO^V9&N<7gSE!n@P!iLq?C^SL@^/G,-H[GQ*"1@@a"/E@tqr-ilj
%H3QZC;qj;!<SN.\\G79I0\!ts@j]I:.`Zbh4+q#>YZT[A"(a^`*E=GeYt^W@E<<J"?-o:S"p?BE]:$Re/We61K1=`PUn`Wan#tc1
%]9`F(6Uc>eahU+uW`eY^;R,,lrqscYT&cL)c9GA/_A)@?Xj'r0Qi)aXRt(82c@a@q:+MXu't-"a^P7QoH*s@aX5D*.oKQT2)a8+M
%%dN%jT1LZKgZg?)q^_^+\I$u>455XuY3HS6rWhWM\C\O%h;RbVU\pOas4U`FIB(t]^HX,3Re5NbEO/c59'P([hb5Kj,]-^TjrF9m
%<ZZ*<J*#oK!mK_Hc8hs_2_e9Mh>+>l<(,=gQ1E>6;0oI=XfptZ:Z$SFf)XKGZU+PN;-n]3knUs^m[`AENr,&'XYj.?/.tESi#4bY
%K-bR7E:#5Js7K9eEH9Y#m9F"b?]7YKMP5)1IJpm2\FrQ+Gkh7jR(-52i*30pD_jneSYL^`hSn'T*?b@PD-r\E3W8V&poKe4a_7.s
%>G4A5nLJs9o-jX3p9;3?qYioAj0!90J+m\K%BWeu:)_*",p4*%'d1N=Q8<k@T&IELfmDe5d5Rt)It=f%IbZ?bD19A:pL3%8h."39
%ed>d@S\GB`Zh?Qas/Z*En)H?@Cj(].7Wr*CmVXihAU@QjGF+Y3:1O1O$75%kAaEJ0$g\YtK3$n*:fr)5Sn5%5k#t:ZC0t#f1.V/c
%"8htRdZ[1_5qbOt[Aim2kkFZ+&[%Ueonu?9caEMV6gEfX7-Qr2TZ^2\R'1Pn>EuVoG!5SC+:QVU=.a@HQX43.Pg02_eRjU@I2-kY
%[h1LA;+9I)W#u-tff/O.$mqQGW7%f*.3CZ%^JH7oC6eepb^,uTp"O5Yn`88Mna"V9!uJqSr:=-j=ti7mq=0f2mCd-;pA2DQ-U:D6
%-t>bD3,(=CCKM_!phq$>p_9n&gZu=5a#^UR]]59omYV7MDe0[7dSZo=If'VcH@;u>a*V+eGfMmmMjZEGm2=LIdpFk#kN+>Ao)Bd2
%l!KP.In=7DmVb13!UO7Zn*4eohQ=3Ne]bg?h35"sN&hkZCL#@Nh/p3\o.LVR=,1]Q/lMJgTN(q3*3"k4],^AdQhTgB7d*)_cZp)p
%YYf-Eif'N\;m.9DnMF_=+XY*;KcX>VnDp=Uq!94fWVC,iq+5\2Sf`H]bGSq2DoYN8L7=nbZD@[jG>A/8@nC$&m50X00WV/Lc+i,\
%"1+>Ss#'K0jV7;]3sOctrgaO=K#dXc1jVFM]79hXUPIlB>3^+#f6dpDX9ZAs4mD3ki0T6jT6BuISNHbGs$;'WqWAs(s89c-/M3mW
%iGlouE#5GS$5#MG%t7"lD#12`P_PdXNBR9r;^qScEU&s+@$HdW1Gg?DR(A':%"PpE=%YJZg;?F%XVn!u[Ooa!fk/sTa0Gl1nt1D6
%FrCSU69s!n$_a&=8&=(t1hc"RFk9A-]&T[cNc`<4]7t9VnU(U!oV^dQrJCDW%F\B*$2*Ms7S9JGG$;?q!R2%?VINiO"@KM'b+M*U
%Gq3_>(juX_2EoSf8#QIG)[Oqf2bf?5KF[@UCH2klLUq'aYUt6QT7aHaC#KC;c3@fT6^h9so\$IY$S1W'1HqdJ$Qh5s:a>A<%Li[(
%#nqm-Sap0]%r("5a<ad*:HFMJ)C"Pc`&eVSpLb+"d#`E5f>WcD'>lOB$5f?`-fO&p3$g3$dcDNd([+9\Qql?J#-nK2#$mW*oq7k9
%XFqW'HkIau!,OMelG:D/pN"$WPBM&r+s!;HW7qaR?k$&LR[4eu/a$oI9hTPq2A[HN\._H=A;,pPQo+`D@EQXuf1bM/X<^Xc`^=i@
%G6#MaNUo!j_f?SBdMC6sHGF_j,Y.LL_`]+mPm>^`F%gR;d*0HV,f6dOPno[>X\eSc7q>e8>-g*&5g?QmPQ_c2"p6Cc6u@K@ZV\pO
%0FIHiV'TZ)"9c.(\=G(sRP:t>A)cN9;h/<pUs4o%9>gC445csU5[2,@CZ?mQ!:\?'J;:Tq"c/(tq6[(@Id(6Q/j6Vm97_b1FTFl8
%8V,iORCfms3(=h)9ESIs'FY''jP`_O#H'>q_+-CfDH[jnjGn&P*L[9:W,cPa+FO?V>Ca`W`,l5$M%:[D3\1h."QEou4`1N<EGXcq
%$#0X8#p9/&=LO,7"fC4SFe*Uf2%LIE%O<CjOgZYmOM5A5%M"DZjfG/7/QbfW-R=%A_B8p)ONb\!R"ED%h(fl+C*7P)LOftZ-&<+K
%egr$k.2,`+ZI6SP>QP&H,=$#E@cF_(!@!&h^lTP9-SeV5TPHTAL(AtaJF.Rk!ArD<L]Aqs"6(PM8aCnnRO4sRXYm>`#!Qi<VIZ0,
%[iHK]jJla)iNoouW52B:cii#_9>L-A*Wm2A"t_Dl1%7ZnA`AV\$eZ$NA=s^j2Q8><W!QRBQ30;@4OLP%g^k0kq#]:1k_',Z`*jqs
%S"UM6F%qC>ZD_rL76U_8"!cbJ)IQdn:ncWeC/BBG,p']//Ro01:GY`;/csN<FW@6:$cTqRkQ9tW%@e2K[8%j3]qrQFKopKe8OO,<
%8JB",5oo5)_Z1`ARFe_]jPVhf/PoEe1Us8m!TR#+-9^)<,>4g=NVnA3DFVOAAWtBEaR!&;2om=3F-)a3I`8U4*I?p8KYWA#j"R\;
%nZfG$nrP679Z6K-AE/"/GgbMa5kU4"gS>)SV@[:BhltLk,7ac"1iaLj%i1bkK%>Ll5q!R0+].mRDi`V(mf9'^jM;2mBEU8rH#d&\
%l@B?\b-hA)bcJY"N1g7LJu)r1Z8^TK"UE0&(,5h:!2]sT"mZ4*#!$($L]g"CKRCt:"V,%1VX6*t)U+>?Dkr(SStA=`O;uQp#(:!C
%^o,hZ<*dt<D.uQT1H_;C-<hc!)'0:i*UC4gJ2@O;M*F&lQ4+HX"g]"nSAg9o&AfQG#74j$[VQ:$SsM#oF]'4o1k_!sWPe!$$jTYX
%PRU>7AiQmC`(5kh*jNdTf8J_$Ji+L+'BjlPR:>4J^^3CSQC3:*mleKM>-=Mu@@4.`YXW&P&BG'9nl,`U8t"DM_DN>o6*c1MU)!l`
%n3_der"CJN>E141&Tj<q7@M_s@%BXmB6pN_nHL<_*7";6p,u$c,3-_Ua3bJE_BWM\lm=3>N9m.oG`C0lA1S&FW+ZgUMM`bn*YD7=
%FWLr2*EOFI.^DHe<,@E\W9BE7LZ;$8?=\_Gn>I0;qh^1cn];tPE@/Pt,#+qY37a&L6\n<r&LYGj@a;U+O\mKX,N@"ihLhLDY\Kos
%!^T:ET[7UV$jtp.7\Ro9lc#RInlh/([(L9-8q^Lu)T?@H>VdG?o_r#+.6dDN+sr9^D4gtL90XUY-/c2*;eUI4p_4J=H4_Vj5jql2
%.`qHh;(?SLH>tDk]k4'4/[#hgW^Zr6B^&#WXU)[jgkr5;)nD\2,%=VQX5W7WTTSap_QP&t@dE@#Yh8gK;(T$@g2SZ:o=C(NJ5M,]
%B3DOlNG+G3f8jXNosLPuDLC9M(<O:>ABW30DJY65Y92S0lg)U#I:hM^W75Y;2M\eU9>JGqNR4reXFWFDJj8IZT_^^f/#I43#?WNH
%n,]T7ck2XZEeA&H9Q4cLF+]n7_DXbX#]&);!shSrJUSS(5T&%B0dtD*?_@h#NAd4iLh:N%*YCCr!p9UdK%ZM>#B4W!%V!f/7bn2Z
%H4G3M%Q5IqYuPUMi.Ah-"dcnohAp&q+HB*2%RstK?^dYbR\%C.++fWn.2snYnKrQMEmcp+"(b)!_8G!*>=aO0!>:!77lU]t2BDJE
%"?D(3_7>+I"-Y"bRd>A$$F.4$UcBoX!.P-fM3GeYf&MDb*Kk$Vih"'(,"'aPTemb@e\cbV(/U#(+7^NGXbFoOS-=!!Z1u-$)<AFE
%e-'h\.ub[E_ZUR[@kgM7A7Vi7PP6AW#/h.m*H3L>KeXeJEeEEZcI!@22q9)>+Xa:WM]gbr$&#@p-4!"*1ocNq$b(d3>H/)_*AC,3
%ACIBr!sE#dOu]+gM]4rq5,ftJ%[WnX'U1:k:l*F+fpONOL:@FZe&6qlS"dn>4;C\"6e>I_\g(j#J^+lV+Mk;8dN_^?P0"BQRIE6J
%0muSR3Bq4(3tJ1uZ7*cO'GU=OUAQ\YU?Du*0!^RZ>6.ct8*M)W3^U/u_ZSmMQdepb3Omh#m$EX(d2RL,CIk6-.N5nI;)XmmQ[>&(
%c+_6uaNZo5[35JSWM]sb(=-4F+<4u!!K+,3DMW6pM\A_olk:+L9plH"!j$`hO(>3<nWQFb"CX?2-]N-^-7s>`Jh>=Ogdj1T^,4M^
%=;Z#*-3ZFH6a-i$6Sm8YLd@^T-Bl$<lY9@0TNet#JN3c,;+psacf,BCh;noqj_/^=LO$=^bTSlY-APl;,92o2?!%oUJMQ$J,iO>)
%k`-[M:RJZ']$`#HdmooeVKJ1WLUD(Id[lB=_:';.dKMq;N>Ss_(b9>B=%XZ_*BS*`9f#1RQ*eVWH9+-;gG*EnO:'+faJ8-8Sfc&'
%e1fj78V;jX\EN5#Z4D\kj9BcOH_&)kdfc9W>:I[FK5fIm4!)>G\3$cRQn+p2L?o?DJ0/"u90`C\o&&YR$sf;/n0']H$DpF5L7f4g
%n+>RJ*J;O@&KQh.%kAkY2)?k55IVRASd1Pb7HlL=a5HRq9*pVJ0pR@YoKb4IQFiM422e3I80DM%>bd/n8o>b;2!(Eoi!0Y]D#E4A
%rRE*dWrDLfO6$qIg;3F!^n!.jZUUXhGtL(d!_3T!F\8tF<[0tS#ZETEH\'^%M@hTC_($Sg/:,5>,!jRB[$b"4cifO4=e3U1?:&i?
%Ti>7P)=/LbWd6YlqZ>a_b>TVZ]2m:L6)\42M64OJBW13)?pMd>D;-$M:dT@1T`u8VG6WDML8l<k#6_#W9c@QAK'j%6F_Q@%H\dEV
%*X2h%RHUM231trm$po*1H\5UbJuTmQJ/h*go`D4g1GGJRmL2Fu-`Wbj%O-J(rP3@n\5^]k*)8hE#,.J%YV,,_)QJ,I*tSNSPN/93
%f*])F#h9o3Yj7EJeH69e_*927oEEH,o*-M>TK@d&c*F.=&,-VE<BZkP`"E/2Zj2<f#1)FQ8Q[=ZZ6RA8dPF/pU3V-.bO@?kl#Koq
%eh&)=1f4e#-!_6dY]s]O6ZrW#FGOrCU1pWL@rSSZ\.3GH:l35t_8%3b\6QM:h%bi5N_VJI67+C0Q>5`S('?FeJVMNg_+YZ*WtWF[
%4=LNQ2B?]"!R4jT1*PV1AWDFhPlDoJK<PnP(u90$$>_K9Z..>\r%\h:_;IiidB?-hN_$Z=Qm=/+R@,F<Cm[a#8?iGrEJ_jbY84t5
%h"^*UK$;thj195&2j"-*4E>_jZfF.L-l0H%C?d3'O5j,mR)EKqMdHn0:QhKg-(U_FE?:#cRcKZlVZfp7i3J#FSL2;]:t(S-52C`!
%),V.J9\b>rmQ=9sKOsqr67d%/'U'2.78G[FK2k2GeS4c4E,<EkZ@J0.81:A(#Vq(0&.P+_!G\K)ou+/4Cs1Qdr`i!/;?tRL,ILKW
%[?T*S;J?/(\MnS9\0apQf"Z%F?mN,^o(f+S^kJ^odoB2?^n/GZNbg8J,.;=*:^1'W!f>FaLhH=&'EQTH)]j`R<.>Ta=TX*W98Ta#
%J?[ohV(aIW9;),'jB7Ei$ptdE28_5L1BkXk9:'M#Y[bc.4BWMk*%k=0UGTmX^liD2Ybp91PTp=a(uc3.BUU&3aOM<&M<8P6JR$I)
%)$HY#C21AF*WmDeO6W`6-"nB':;h=?Hdc6![V4g6KSbP]_haCm3g-&Dk7PQ&)mCJ,DU]Sf0:!qP",(F#Jf;!-Cq7;L+P`Y8OPr_:
%Oere3\63AucljGq)Qm!k9grU9+HYbgMPIVZ.mZL:Y;?3o-M%eWD+G4k29[Mo&g"M."-[5\%R>4`<,%UF4@-)`EAGU7+PR-0F<b@m
%K^!Fn&4)V_\eCZuOm1#sVBbIV65?)0\JF4.12WjD"k8s?TK@n/g@=SG!_mX0_uR?UJX[=MPf/*nB&9VV<%tSQWX+4fI@-I]WMUrd
%_aq\pn2.J5l=8jl-\>$PqEU0:hSMXQ`k+hC2([*#;Zil%4;k]Xeg"V^ShS3eRSZ^5qb#6_):bl%7#*<!7!k2r#-+F;EdNjjb,?n*
%Le"TNGI9S#6s&YW%'h_K'$0ZHgno"f9Ip]gQGZN8D4F1o)`;17:N7W#:cifg-;U5ukl'.IJdHP'M@*k'VPaik^f!;>6s32^)CgCY
%[O*lV1,VO#)K2CC[o*e>qXqi4\`]EmjGRM0I(C5hEZY[_Y%58a:)mDjEA2rc2W.\uPt,Tj$A!nqV.Z85+j)>AAM,eGZIk[Mr[L@8
%Tm/4Q3JM7jKSCh2&6U#AE>YQ;WZs#mQB%jr5`lMd-RE;g>JliYP.o(X<(iRebIFR+p'a6YA'4Vi70(1Y/3+;4D2]UeTpQQBXIFr4
%F<nqHjg^m/,Y7M`;iN<:!KkF"`T%lJ+aGV$gt`j6cg4jO*FaL.!V&hceugYNTpT0NY`]H941&dXgt-[T:P9#1Q5?A+qsbqja8UTi
%Y=5MD_O;S-63skk;CgPW^n#>+C8ka59pC:c%>/Y;4r42q=H"@L*I$R9f5MB+[+WArDfhe.HBW]9VCo><BNS@L/g8BD#W+bF;s]Kd
%#^=0[5$<G5\T*R)cfALT%Y^#uZoEeCFTX-935F_(O>tQ#ZM&1_.45>Zf*F)[pd,6U#R'+g=9No0PQiCK(9nA\<sdY#!YC(_"9OA'
%D;"mJ3>kn9Ds<"6h=7-R(i7'1*)2$$(JQ/oL!MLd(A<o$NXe<u,h-l\'U!EjRKJmeNt_R-a<lt%+A92.N:7ORS>%U2L^Zk1NFs=E
%,Rg;KGngGTk?3s&P`[.1nsf`PlEX!LLDW8Q9A72P",k(Zh+"s]#>@:O_:!>h'f.R*AS?.)%)O7pXW$X'\9++UJiM9=CTS._dBPEZ
%!f%1N1i4BdH*5F(MiW#?W@,k&Wi<+_HadsfJ2KTRB,M>XHRN,]+Nik#@1g&A`mFi])2u8F:kPjPi?,A@2(<K?ft_'fAoMr.L/;*9
%+<N8Bn-kZ,Lp!GK/6pdN&B=s!/5&NTK,%WePLMVtl6DR?-)7C_8e^1.1Y`i!AUJ"_IKH3b-5"GTN\0#6:-jP`DSTd"=C5O7Ge,^K
%#icO16F#Bt+;l(@#`J!O10b!G4MgWN'_GQ!O;<FUWCm^g<6Yd3#g+?Q_hP=_aoT9qis%96)%u#h_+X'P]*CXSSu:YQ-A#H@-;=rN
%\\t6fI)nuF5`-]-OEQ3#86E/HGUemg9ol#[*(*YVn>V"uf5GH8<(4/F:7he;mA5LAX]Va'mO<:F#Pi$kY2Z#<i(cM^=\6KHNJJb*
%be?Y'd;W#*N`TF'PiWAWd?qgA?#D+4PJ*imV_pNpJp=r"9T;i?o(clo*kjNG:T%<86Q3=q&U>%Kc?I`;SUb8:&nG[YC2'p*1@WL+
%MMr&EBf^mFKh:%Sr\cb0?^<LF1D'oCYssM5=b7-LiTeDL.>Vb*Yb]udDt**:[=rkXj5U+\*oM,H;-$:_N&UsL2-ikHk(`QlWO<!O
%e3U%8`q<^g0W0#dVII*!a^Bd)btL5j84agC82.m9+irSO=EI$K'WGLAh11oE\^NhjA,mVj]4@Qc;BaQ-"%NX&9Squt$H*5kJn1m9
%]T?Ql`[MXS.*5qT@qC0UVCBji>HZ0[:hs<YMVlei*eVcL,KRcC/qRWI$`.;,9r23j,=NFY!7)(3FGf3k\-0+ZE?Ps*SeTZ_!Tc)p
%\:c2ZE?a\^`fUCS1s9Ekj[bJib`hlO9eAVEK@-KkjN94<U;E\=jH<2rcdt_$ctu]6%N>q1&BI]6L"Ja;E#+Ila\sa@fl3mK6Go0&
%6)H:Y#AZuMnt&kA-0qfS?WKJI(CiEQ[=P)&k'0mXad\JrBQH.M`6p,B*.m8r9t+]-;Et5ud%Pn9*<3P&jJe0WE@5>9\teQ3*c!PI
%eHB7I6:FdT[r>.GGqVjtK,Ulnn[/E.FSguo%IjsEV+QVVSP!3_JB+ZQ5+t<"KMBKk0c<5]$0B?(.$sGuXB.g)^NSH<(:m0Sc,t)T
%Gh@sjb*]K'nhP1?iffk%;>QW]gZU\''jL5XVVuEBnZ6"rFM\Cr>SZ8gnP=g(/h"u,c5-nnnPQ2qd)g6SKf2f"`u==:f1qb0+P7u+
%,/GQVE.tm$Cadi-GGKkuCutTF_$:Adff,[uF83&;Ljjj<]J1&9h.=r!@NoD<3Yu4[TemkH[H77<c))LWjChee"H[6T;-FAT,qW6E
%ZIo7\rq->iME`hNOWfrX3B85hg*a[?>0*1;?mNl6,A?'?H8,h:2,?[K(6o#A+s&fnN&(0;+e#Ye]jMUn,9iQia&GnSc.Jk&?'<O&
%%)4>%XdT'2KN9;>F;)uMieA[d3HSjSO/s28<,Ll14@)+e%QLV(n5XQsT'sXtR!_pH1K7MsYcofQqk4"4Z+P`4kh2.B9'_6YF9?Lo
%?GN>Bk;BM.cFSQeZn?n@"YfQ0BikKU[KL<5]P%k^(3[`ci5hXZ>f_#abAedufN?@lS4BLc%R!ah[\i(W:2;oQ*/)BqQ-0M#_D7B=
%9\XJY(K(mqnM'%4jOOWqaM?LMjg(=S85O6aB`qD<"h=qn:_SIlX>fX&&I?fVU%&aX<t7R/Io7d[J(atI[jY!GGk0o/<kCo<RNn_(
%<T15eQpRqecmtY!F[LasO>.1pX-Lb)=a7`m#Zl$]FGKB/5`g$8W-UQOnsKuAn>H`>)tPH"%lCr=$Ep#KBWK.G;_TQN:Aj$P3ZX@a
%Dk]7p'lcF$%dV(rT;dk?7J-(b%qp^$Qk"#hKI(uXa@!ikA^MqK8/h!gBDc/t=WLlSS^pL)q$4cf-kENS6IIGYQ`'6pR-'Pjh,hRW
%<seXu$hJh<@Wad9m0Yc\dQPlpF4aMZD&mh9q49-$&.\b#(,f2\;##lK(&:d*&F<,4E4aF%JCkh/bFoW&[Mg2-6M'73mmGS]W&FnP
%B=u[uoh"aF#T2LG`!>BJq);XLK]IB_O*T1\0,s7+M:mOnP)c_4jF`.M]UH\kk[Ga"ITZ(V;p_t'AjkFS.m.I(YM'tX\V0YaR')_^
%K,fAFTMN5;B)<DHJh&\S7#q0%RN<6TK_11-!rGEhg'/afh1p-'-8?W_a5?FOf)m?N,]Q8%8E(8HMr``T\mO-o&pid(#gpLUq";U[
%XWmu"#JQABnC$;%Tcs2W@`+L/K'S2!<HOAYUg?RJ?17'a$XNbpq=[ujp)7rc&%rK7%[0Z76Oll:$Z\O/@l')L.5fhYf*E0UQAE'>
%**sdsj(3/M3f@nt@2TtR<=4KG%\3+R)ES6mJ45_9]#mrm#\)5m!?6r^>e3EJ7J:tS4E28?'\!I@G1lfo\cSWXRjfK;Mba"W%0j#\
%`;3hSRM(eLUIPB0pkCm8"YE#EkY:!W+i"%2`1KL98<ZJmM'[;:*iuBiBrs)>FOK!N6Hm8</&d!qItN\%)^/KiKs1a`=cQ(Vg<nT3
%])kd?d#AAd.)A6VNO9`gs,354"@3OnFao-(*`i!iIbdi9535VV5WeI==PO3'W?&lKe?<M;b*\)`=t/J4#"QdCN2ZZBqE=Z($ut:Y
%$7d*arPV,QQ:=qf+XqXL"MX0'+"6SP&ca*CKfj\f8d-W0DmkGQ>B8[Z&urt*M425?]#j!YgF^UQe9NpO509;+@<K\eZSi/*iSGt1
%+*b^)"$,.L&l_ZUD8,Y3,k#,?j=o*Sn8a!]aklCahqcnlB[Ri&hAcA7lDAJ.D=irg8scm'/1`n;Ha,-slG_8cp+Ej;K>!jfs8D5Q
%'?X9dWk,7:l\2TP`i_LSUm+2Q&Q6OR-qNS*H#kAR;*=#)TcJ-LI>9b.GQ`s7Ngl4tZS_P:_>Ze)hq+R)mGHq?#LHZ:q`F-#IP8!a
%;b'3i,2!)3nI0gWg-rS+(08opnB>"B!!WPY7PK3D0r)Y:=kbk(s"Xn"+'%:dIi^F[bMJirc-UIWGg#f?5s#VFA-U7=1[F[50]*OO
%DqnCFeq$Ii?S3>*$K?7NKMQOjC:c(+iO\/O[(/n_<67e"V5*:oLd=!-G+$cq!$N&"r=+\qB`s(ULq#"ZMV'c"V+]M1>Qst9L\c4M
%38TK:3S>/1I_<t\4RZK.mo9M`4$3:%kR;E<Y=23I9+OYn>2\!;AH3P4i-tOF`t'D)KG+d-!c.[\-G*#.*Ke(N4QVG\V:VGGOVaRM
%Equ\7Y>pr@0l[!!-B5s=W&6):K,jf:;3ZY+GWMhN91f*208M*dNM_[f0c<m[DqB/iBnBZHrtC/&'/JXcLqt&e69s<iMGPiT?kj(,
%Q^O;!>>k=tJPa>=S;!MnG8O.6JTM6WS!U9C*6:q&0e2f\H=+!\VnSHB[Y9KfgjT:TA1Xlkn\Xd["ZpSA6n_JX<<SU8>hn:1)4V;K
%l++1ojYMVd(5L_,OF)N>$#_LCZ`;^KAE5N`-5^3"i/Q-1&+Uap4Vb64`_;f]^J9)$O/W&uXN'^78V"#q/0B3q5fe1([OP*\]Zrc+
%]O5M4OsrMuic^MJfU;Xh+EXjb7PLV!W-BdOYEAMZ$lF\FFBc4"2e03-08t?!S,kM%!m^K@MRjFLc^XkMoK>6/+Z;*=*\*Y/@4R`7
%`_IEbZ8KIQ7,1uY4W,>$E1\/lYu/.r0=^?\RZp3a7W'Tdmr:>i+[$qs0"_oMMtqe)SPuSNKF;":3)nW+MNa]T;bf*Qm-O_a(%XmT
%[Xc"^4<?s<jrGEe0&uFaQ1nc%5YS>=K[+S6B;,["gT&O#1BK&qJ/-6OK^U`*H$,hm%b;!qg7/>Q;d)b_V>rbVN$Zc"VL'U4$q]M\
%O1j2]"UA-sg_u,-:/er2fF$ldS@O(lOP\Y,&PE!)-ep,5YUEkFfY-jkUZN+soZVn7n=ePQN<%>S*O%50N;tsLiV?]POg6]L7+49L
%@`2dXf';7L_.+2-ioihJnTCh'E)#IDN;RZ]`!=9gaNY<89@]njdJ,>?Zm#]a"gaYNBUnjnrk"3Wk>%Xf]E$a@MaT-)()o[W#/..P
%c9Q3,)/#MZ%dC,5S0iQ!66JO095%b0A$GH^W;&OfPi7;t+SOGGhB:t'HAuVM3B!0eT*WiLr'ei3F;e5798qpZ,P@5qeROJHUuWAI
%W"pc:[qS(OWjIScOt]9Dp!Wdq0G?uP<I<Y5`S'i,_I&4#5Zm;d<+:`PaMi<Rn4tMt0<ZSZHkAlRZ$E$0.U*d/Hc;]s;hChU>+d_j
%jVoFc?6o:qRKaI/@,?E5aS!@tWRe!5nGEpr'Y)dH((30:opp/K;7J*G@dp<eaJ*RV'9I#=4&dk+MF`qFO/5rId0M/1A>(e0LBB@N
%eUk5qC8Y!1&<4Q8&j?=C[O#%['1b\S*+eMW36gC45m,ife4J7i,e)Y(_MXg::*@L)0(_`W:h>R7Xt0@Q)I58L],G,&!j_(M[1<9^
%6'eJ//E1C&PZWncNBqi'[X>uuZ/;6nan6a<;9FR=1sY_Md+a+J:-NBf(gKKLkI.\@p+R9QJ64+5$s+>/^!i3fSPSf3ir=9_Yb$H#
%0:C'1?hdmZZufGV2=WEI3>1sDW,jJKbdKIgoQ&G))7,8^KEN=f$@X!]DrId.\eOC0qcT+,-Nd?R"*?lV(NI@NLPMh8]q-8/T49F7
%J`)5k\CO[o;N&KI2R)Rq)q#(2XkLRmj]ba:%e^9jgD=bPXJ"b66"W2LHa0]X($(^U^pC8r?"b8;`,)<rpoB4dF$J6_,GWaL#Yj1k
%S1%F%#Er*`pE26m&6WpNa0p/0eQf`<-'m0$Mi4qf\:2?604;6('B6Uo7]>]gn4=s9*'c8f+LmsBXFcTk;K)lFaU$asS.#[dB(D@l
%)]a392M`%A+Qrp:LCW<PLanN:5Q$]SBN=G-Z"WUH$#CQ,GhO[g"[`+Yh?3ojbqeY%%U+p>_4:h5f0(<o_XgH)O.O*u+jQT=Fs.3U
%O[P)g%Y@/-Cr;'Rec@LOcY##@S\W8HKY<H#pA-N1D*\WU0]\WPZ:*D'*Gi-kR2-X-]R_RXeC%1nJF%-bJr^"Ir>Ot1^(8IBjEW)]
%c[B`HF^K_CoL-m=d8Q%UDurrUBoQE:,0s%-cJ4MiTD9iUgJkm+6G=%+jV+SlS3>*u#9)Ee;-#X65StGj`tLM-1fXZp2-Lhlbe?am
%74-@d6!_A.,f/OCc&uVdGcO3ACI=6unNN=j4]gtbHk:*TaXWD/6jj8``'RN>hlp(dqL&r-iq#i[hfG5hSVtn/s%;m<pUUOH4*?q&
%Y6QaRs+8Zcg1CV^0in/pd?,7=Qc-X##lSZ&@G@h$&GmXYG0niuCPq\i<TQLi:lcQs+YUD_&tegiZekJZWbW]+phYZ0cWenOfQN?5
%dK*f%%Dl3:@lCr2&=XgrSGJ@,?Q0:LgjWj8%EK[#*Gip,Bq%n&<Tq,K^\&^-6R4QID#`2FGcU,`a-Zb</2;)`Q^"J,0JAX.XW7I<
%/:4gp/53(!)62bDOIh4R=,KEbYBctfa+tqu78p(W0NF$<['3h$(0AtY[a=<f_iHnS+QtuEEB@9t*%gk;%#D=PR@3FFiZ`CPgs7p\
%ko[S"fP5=)K%IIYfY='+UY]%h*l?DQ_tJ!BRWkQWs*6*#a!^+5CaNFF&#6C\_dJ:HI2EBrVnM+u6q$g(dpPSU4PpAgFP<j60QptD
%N"1l#dBROBHL6,7H5"<7k\WHmL:X`$L@oj7$Ngl+EL'ZJM<Z9,R#:VmF4(;[C#?#+icMud(Ntq=JSW\lCQ]ncG&fX^Y.ClhSO8:$
%&UY!0SmJ/FYSWp`A+:Yqrl."8@27Bm3t4<[P7FDOG$`"ip`D][h+gs[=%#_YZT&JtmFX?:bJI1s0E$[^%I/_Wa5c1o@kX*f!+F;b
%O9(2TmEqq*!A4IdgA-80jcB4u_p;?e@M`sAf'Q!nRYHR(jWlm=N]\C&@ONM<2ZSO<O(_M0LE359i"YTr+!)S@i![]qW-)X(eDK0.
%"S4<>EfIok]*>on-=2:)n3;g`q#HS@)i1F&&:OhdP)A$]#Wq<:lV+FT9,N-mr#5<U7Y"iE.DtXkhraoEc(]:lqmQuY;&cW+"qIcD
%MQWN)&,#f1WS9a\n>sIle3S0YBVNEC<?*7fUhr9<6$Dbs;0mlnB:^8&6VTYhHa@3dT=9,)\SRlW`OE6ipmJO;X6SKVWuK$ET;H'W
%_&j6lMV\u"$JlAL>'im^a)o6ohrmkW5H:WOp;LWQ/C'fQkl@/SOs7@?aaq`F>dtdO7Jn!XT5eKcWZ$tI[VaqLPc^r[E8)2Ll*`Hc
%qq9QqXf?Fa\(*P7gpRm8gi8d]\3M)'j0X(.ff9!*AE=RhD"@3ek,,dp$@n*n^S<i'/7<l97bQf(P,+*8cf95tY+lE(Q(BhrGI+,(
%D7=Q9?!I<iVeOlrn@)SNr8-<0,Q>q/S6(IbI';8b:CM&Q(0Qf\=HLjt4*(pY3<-gqhFh?cBAfBl+C89@!fG%o<JN>9i!ZjZn7f^h
%kMnB1BEs#^Gs-_gcs`T5JYNqGM\?uB]JVLJSTmh?_6j4upeN:4rA$?-WNF&Tq2$'khj248ZYV+No8N6ApRSH"I9_p.*m-$@i,B`J
%9<kasDug?(5iu+WOO7X"p)5"$HG=__Fsj<RN]s4_<">D@FA[?IJ7HV$I)ZmX3CU'%a/mk\7F_6#5g?YD#C'p"_l)<Mi-Ur+[=9R<
%jF2?qXuY:)\(UMSBTSoF]:8u6UZ7Ge2Uf_<nEstniA%J/;s3OrZfRu'_(AZ_M9$\U`:#IS@o*&<Bf4d5HOZ$M]q=#.R#>g"k^M&)
%5CYhh@gh7Ok0BON^g@!pXnB"jmIjOP_I8XeS$>9jHp+3^dd-u)C$4NnD&(MLG31\L3(T6Y0oS>=ij9W)gEHGHbDmu1pr;%'>f3<5
%B+9/aPC*28+-(bJD3s*OUF"1T7Q7f7@7ReMY95(5LYf/qmrXXX<cZ@QG@52mr1UP>)Po-^CA2&hf"(1KUCd.MD8.$:VTLN>2'LmD
%1Zi]j_LV>l,9,>Te(?[nK_REqUl\=B4T:E]a]R@/%8o0YD"ph2n(mKd5n$-X[NCNX;f.lX^(HRu,H6"k=EJd:'&\BHmK1J:`pRcm
%dDq&hA=bB!Y2=#^ULO`tG-)[G3'pf6?Fbed9f;P^9sk>*i)otW*Y*qN<OoBI*a<7?c1[1Zs6rB7H6<l.pi=1upSbuK5hglYFtQ$b
%]PA*t-3.PSkRaUMmKi%848]X(+*:?4/))6EWg2C;18'WWJI$ZeIb15/[91ZmI^XIE._G?G;fDGm-9r94#>spQf)*m*cup9MF^+BK
%@BQ?6*Ie?dl*q_5gS%K3,AR27X4sGWIs2UhhSA**HfqKA97NiuIT*KknW+"]V=0=3V=+a]/\`g-2fA\7,k=5(W,`CWJfR^P!heJg
%-nDr@(HR,+@KgKL8)k-%Zo1so6[Qk6-m^QJB6"p*]8LcIi:b'nF&q+n^VfW--fklZ4!?n#Y#Nr5O<TJlCId?s_7Z/fNPW".^=F;n
%Wlc;!=l=Ql*0?uKNYeP!m-#o8>@tF)dG/M"I++4T2+@c_"LmL]%4#R#)FZ'8'YOlG2OWJ9?J7c14+soU>PQqO6[7jGG&O>)j0<MC
%^\`seb2ro;Tb)f+QIUh;JsY1`kB7KDD[^nqa0lgo,+t(.rsV$3Uh8D^+u(!!^.&,SN2h\s'LVd"a`L7I9.D/?8::Tr,(F]FOj,C^
%rVLP0B#+!K*jPh??rB28YbeoJ:aD?W;`@+2OC*af/I[%7#[ok_(lJjr2(4OdA)ZCU9ipeDd`'MR[E^:>d/`jjE"266E<H>H^bN5)
%&Pu78\jF<qX+0U]FN$T(d"hIqi-Q1$L#4;777j='Z?c9>"jm'KkM8B#gOVQQa-'aI'e5s!(kI5D3&mi`VIo8[@moR'jc-pW="jfu
%nirT"Ei[VD'!\.OVo3hhN]or),7WJPIu;smf8PQp-sgCsDb'9)G:<JY.luZ-WclEC=*4-W;8,do]M><BemD0[pTC0WYC;!=%$m.'
%qtS'$+/qVM42gSkfoA)s'91O&"_*GJ29<r6#&ZZ\]<P@[l0i8bc4OAUbTq<FkD3=AULcA%U_J1,j+B=dP"6UC=SqQqg,<IXjp#^o
%hs8ua["!1^jkdT9LO1,Ol7SWul-4:;SFMY3"f:\17:gC07YU<RjqF$B#\UQ6rHY9"W6)gmn,FLYhnt9]1C_aL24o>rjHN#S,IGe)
%*Si!F=1?:cs6_l"p',D!gq0gkGNnSo-AeX06qggLQTDWu`;$lq?sm7SBHFY0YQK3Ni(&"FUO!D^<H'/L++:bPZ_h!N?f+NhiEi66
%D'.iCKB$V&?g2#\TpH*-T=J71Mh5#k@[OWCeriT.Za\ujG8`[DdK/7?26CK]2B+jOD>#f%.RI5,N#gXI6Q^U(<,f3>48:deBoA>q
%bKnS<Jj17E2?fM>jnQBH*l"$W;4S_CIKSDA\5$B/hf#qlm1iuq]u,R)d6Vt-Ee9/&U?g#tAKVTf:I1"Q$8L]g_Ip\EC]RjQA.`/V
%G^c\2,Re13L_lo+DPfBk3?YV(\Vs_VVYCtuFsnGG[7gSH.S9s*Y9$@l=ckC+Pms/Z1%J<K+c40r(-G&W1*@klN3>`ZglgdT9<+.?
%`b$R1"\f#S8Os@%BE;7/83L$/asILH!NCoBGk%?'B/QDmdg,0).MR8&g"OalHk.HSWnEb%C8nJ55+=h%rIE>9@0j\,"c\U`s2)8J
%jY*(`c!aT2oZ!g31am#?8ZD=r91g49R&J(jB2kECi?Z(665E-TH5O4EoMVf^]b+(OO?)aOaEGsgdWR6@2P9@]MPmZ9i:C[[[-Pjq
%akX"db^.5>R$<o`-0LZVPQkg+Ai>n4]_j?7J0?g?s"^B"P:+9f#;[U$UARq<9Pr0Pq+#d[Q.IVb@m,RP>8fp2fgLh)S+f&+ML()h
%7LB'=qa3]#Y_m=!&EE])>qa2'P`6HBc!2hUrQ!#W/Em14j*&=Wca$[59/L@5gn(KgfhmZ+jOtf1!$nj>O="DP0J=$W<ksiKQ0P\E
%cnLO0ZW=IHRo>cVOepL&5uE83\WIuB0A&Yo]qU(f;^iLL87-7%X(W.X!suFP6HVdRk#!7n(Wn4))t*6s_Ai7f:(M5,+S5"C5Aj)j
%@kcoWa\Wj>dGS,bOj,1FPJqc,A>]Ln<%,^r`>AtV$&754II\\\:(*nG]gT[u:FMY]l]A*#L_<3D,&,kjnfj-c?]\rkOKq4321edJ
%X=[Y3Hma@K?5,&"q*#M7W>,3BEt+k(a+Omo[o1IrogO44'Lt6+<O\^D']W6KFd[#qPGNF_3aB/-(mC6Pj)DlB*BRm026_KT#Z<u`
%lm+#`=\Ot.U3F_bO!!B(6?A-4dU\$,OWq+12h1/;%G02$kdblsg=J8o1(iA2`:L7$%bbH,kAt#d=0<3O2Y/7oF>Atknsg#85!6/k
%S.GC;>$U7:pXWbKH,+A_LF+]:T8s2%$4'e1Wbq+HQ=nWZ-B1Io()L$^+9P`joWgd05pJsE%`Y9b94,U$ZA+_7XPpRjiHeYE9&f]@
%22pAYXneE3^>%q<T2-/Y8I2Xq;Td-:Ln[Z/[]rG`-j/?,b6M#u5-S!+Zlr\/:\V"1B5PTIne\k#@5\g3Oa5:DpUSVei4lu'7nn0Z
%$G;p'H6<tj5>\Za$?]'k,,>nXeQrLeM6r!e:Ipt*<hVf6c&ccr`QX6=$feNp!,W9Ab_sOj*VBW0F^`s29"_?nRXudQfA=#6p8pSa
%<E@CF66R8>!SQ=+ZjX>m`huTYNI@'Y5t#Fl&b30.=qAfFL3'o/S'[qmRE:[=L*X$4PW;28_kN+V>$XT""?")],huAOFJpBR@W$O2
%]R.["HMM/(2i*E^QLt8"6ebIsXNC\m,W%tgj[GJ=80tM=Z*&93=t99u2Z'f%KmCg7Um>nqJi&=9#o4K+O^r9URft)u><36eVk:1c
%r<rRom)-n+VPLaVe<Za6)3bbeTbG!/2&:QrPpf&+FnnaO`*Em#o<l3&/(AJLfmL00\%!$br:IJc5CUNMjGNs-e(h535-lhl:TR4)
%\*Zg'^06nY?Ymr@:T[=K1HSP1>tYj-B==\r(Ma]Zbh`IdZT*ZrZoM@LWRY_X`U3jmZTNfbCes$!XAA`C`Vq^l@Y(Q$<uY-0]NV#G
%Dq^m7I'H)AcEf+&TtX^*^h<?hnG<tM9$_<O_p;A_<lrlE"[97dp%uA0WV2%HF_^]j5.1@NCnUp%fr2dV>,h5#Mk)objG7jjGIA)Y
%ojj'P?&M\rlDDh+_KW+_m43DJ<pc;6/QYZO]=+c#R(LqMNN%rfdm5q!@tEOGA0IfH[]GJW9l&=Weie@\%DQ]+8sX[<>+6NkXkNNP
%g&'@&A96A:]rq,@=Lcrtrt-4E4Y-MK.p!\G9flFWkbb32[u5UAmPhS4G?DJ4m=P?mB[!CA@qPTF^MEe:fP]EX(pVg2E8NkIft]Mr
%DHXfa^2DZ@VUjP0KPe4`a4*0:6<AM9>2W,5fW9[o2R/h02m$ON.W=%[T.K!J[#MW5m@AUp7a$LGR,oX!T@pk<(tsa"=rBi:ZUH%3
%01@AC#qDqY+%@M>V&O<0LoF-F8gR(7LfSo>p;oFhg#?;)3qZWEQ'hfZgW1Af/(E-B'U'F`FVM1gEVl'>_1s:WOUpD6mA!2BN6E$C
%^uB%nd*jOL%DcA)9Pc>^kUO0TB>mrT@XVI"R*4V7.^D+.MfP5p]tokIURfU>_VZQ/LQ3D]dTaE8!"5-BE_R_YmK4l_I'F7;Z7I--
%-o/[h?ZKjD)cKDo7AJtX-5r))R!C5(Uo8!j$Q;^MAO"+Ii>*KTfs2#N'EKg%k5]NqUbj2=`i<PS=\c\]C8K(7=0*7-iV8A0GOFb'
%qs)ojG63../2A"\T#_]!U,r[UD3`4I"!L.d3_c2Sm?I2`XRZoA;m<SfcUZ&XLCH!S`2njt$Ic?EN7-T5'^#_;*,6Qh-<+\-X@f<Q
%5mEnnkh07Y`ZKqLZ]G8P']c61V(fGBmj\TO]0l@qq6:`G5C1n6D.9I;SY@B37$f<@0q4L)WYqYdN_Cmj%hUo<)<%Xd?P5g,M'@d%
%b]oA4AMF[D3Z]_E[PB&6OjqlMc2no]P\"bD:o1fihuuODd&mq<dK)<>BCaNZ0*AGi,Jo,K`Gc'O2%bb6&D74@[oTFP-sJeM(?i6d
%%K:1UO-;d])%gBYqIr_DhH;#<cuTapfSlMAG)I?jMA,M7Eb/,8<R-KU<YM?odoM1h%NFS(7677rF9Mn!+kJ)_G"mAc<1&W).3IJX
%r1]T1r]5jgo,CL5FB$RWkce#dk=NOL/-&Y>0or)>Mc1CF)-X-&1Ka[IR@(':Z*6m2T_&\\K8$kN6ZPg!__gDY=QEu1cG2Qlb4Pc:
%s/M%-7+X%rB'3VYBPg2k.>p*j7XOM4E0F=G'QDUA64_7uC_&fR+U=%hV#X$3AUl,2XHUYde)B#=8RLXIR7Zisj4R8Q7Vji_o*I+A
%.HgL`T6QP;3gn#EER)Kd+.V"4:5=0O.B^#?4,^=#.VLI9JLTf+OP6'necF/XjQJ2(b;8N97F?u^D](ldOc.%[R#WRK[F=Ce`oKc/
%j&0LT2tcj5fCSiEP_8$;lW6Z.%dUTOE;?YTY$T]dPF8C[9q::hg9bhY'riZ.XJhLs7h<YcagRmi?EI&*OJ%GJ[c$IWcKh&IK%mjI
%iNhl/n&KS>Eh0:YXhhod?e='\+HO@JfDY>e'fobSc9>:7g_G[#5&"a2!t++M!5uPC9G1\Kqpg:6G8!d#R@=t3)F1[1V\5*(6A_Yd
%\aK:'aG.J=,Q[R>"HeTJa9UCZFF.8Z76?BngGBi3P4(2'mkC+ar;[F@!tN;-Wu2VJd@^V=1(I;kh\\1"*f6;\o<_A7=^Q#=Hl7rS
%gHOmh9bUZWEa601g+r@_brMPH^qKa$<u+[H^.>`3dR17KcnjHiYK8Ua^,A^*k8/AK70AhB"APjdm:llPXesQ$lP0W&8M01NW@f\+
%M!ll/.7on5Uha1>@#fQ^A)>EtI0L1_$[*l0lL=3Ij.2)0r-6ou%=(q<5#C\"NFL%&iWn_9m/Vb;B#sZ\Aso00f(4LVqqkjsaDcDb
%l0U^^j6GEg"?s.>_-8b&.)fh@e#$+'X&Wm/`NB?Ad_rEo4L6VjhmP.AiMh6>pr1)QhrDr#`:%>>-Lfc5VGUc./5=#8[cWpKVUd)C
%5-m2!hmYT<Z&?juphFrOa]H(fprr;nSF>1'.XeQc"^gXm%JJ<R"[97Y1#q\+Tpjh>44Nc+-)ssc[7*NkGI9nkhm>nY/'KPB__3pI
%G*f70MC-R6;Z-O.ASQSF`AX:TEL4/bWHo!J^6P__FOs:<beIeiC:C`hX(oPbCTV?#h6g<]qR4B>p<2aVFp3?PHA.ILg92FM],%JB
%XID,Lg3qG-Ppl+TYpt1RP'uMF]ku.`0_]G<lY?HU<Vqd+r]Rme?&SY5b>p^[?/$.TH.TXpqntYpf(OrI(@M'l<9NtXiAW>p$14V7
%X#YLXlI?lfBD6/0h6hX<l.i[pV9@Z$IXdb%e[Z-jj`JrYQ7[(-%^o=5VBp%^iB:E?n,,JZagE=,bu\FX?,[RMSk<N>b4IEc3_Oh/
%8JgA@SjIDN@eOF[BmiUN=!QHLjunq$#$'+CU1(k_2=jm#^F6-$(uEK)(KYLVfECDu"fb*=DAVH&80B-3]%BVQGL"9f>\07:4H]i;
%nu:$#$)Q@!b@%l(Y#J(/et*SM#\k]p,&F[kN:)C2i?%"ojd.R6*"j>49fKA<d#Y&4[$=k3f(2/Cpa05G9.0is,1`BS&Nq`84b11Q
%F$,-'OdVR?$O.il7$^r5'L_+d'YUiG@X*t=@23J]!Pmm_/'_9;iQO*8Fb>p`80dc.b*e62V6<_Z+&$Vf?d8C;%:b:hY?8\6%#ZfW
%i4lNdA\T#!CPC:S'-mZ,.KE.XeGrm=@/X1S@h_OK3>-T^\"6TQCrjQ#=D6D"a]G>+QF)er9W=r>AaO]47MmTNkVe'Q(9-:5&lU1V
%)iP!C)$LEU[I/*FihXW7bKArBh:#78>@]Y"agrUW)Tl+9blI'$]m/mYeCs@RZeM8<V+Dc8Hmt4dJ1j\#$G<kl^B3]5B-jcL*b1L>
%,.e;c`76Qt$Xh4G5s^7e?o^@("rFU8c$N_>26<@nRKDkIB%B(:kprq_RLY!KjA0^#L5oE_WgjJtg^n5a+$=?P_tte!<#:NC'tRK.
%5E&F\OOZKMa0EW'5DnsWD^/L5aFK0L7:Un<#H&OSC;JjnJ\Sqah_&nWl1d`ggIe_;r$qQ]!!et)\9L<bEO^0<F'-^I30^A:22>^^
%H.CnX<m+AGWXb(Vc+^BK7(D@[kKf&a7+1$AK79t?!\$b5i]9Th0Pl<]SUjT,.":,K#Rde=n9HuU"3B9=T^k"/!%8[FXRJ-[=:2^F
%8OHQuQ%KB3[boVWiJZ>9O-Z.+]Q1HP)L_&)XRB3kSL$7ZnoZ316T#h/bFi3S`F\1:VUp(pcGXjjksXggTp^ntAVACYi*36.5tCT_
%I6k#-V@SBf$,Dh,aSf,8C9Sk<FJ+7Yf^tU[k(A2of;PenP$2.XPk;ee2"_f(+icH@hm:>,"-%()kJOp`Qs]%JXR/BolNGGG[1fk[
%<13rOkU(SeJOQP,-;D?W+8(nXple&#,B>\/8/U$tON>C]^,!TOAM3:1<bAd3'Yh14Vltsa2_IjHCdi<%(26?pjeT#U[5n\Gh`(V_
%1.j-;hSddj?&>GX=WYFqg9m::(`J&L8'*2mb8$'O?+L?dbGCgsaA\.q:DcU-<3\#1pUNh?*`TP.!)IpIrD>%hBcG8\CbpZ#6*ghp
%#Il`"i49X'(;P+!g"')&$+L1mjWIhd9.f_?#*Z\OrhaO''N)0s>!Q7@4</T\0FmNd<)8Qarrnu$n]Xoc+KZC'*6iX`2N:@&3<V>7
%Y,5)@2^]<o-A5848VMJg7-Bth$[d^`)AcYA#E9>tpQ,Is6@or1Q"fCrP>"5+7uDUTAWc0d-=^m-j+4$[gS4R".P>ZfL7CLcMt;Pg
%dq_c2fVMOH5js7[A#Q(7F/Yd6K8AFj9d5n6(e$beAl/XXL(VgkC"1L6`mL-FB',6&Z[pWQM2Ba/M313uL7&0WkGt:%oP?"nXnlKX
%2/m"W&\VU,kn@]n8a+i@@O!O<'8:TfS-XT!FAfBMnKdaC5&gi]##mr;-5=jg)c<,^(Ge\IfoY1r^R.n.SJY<'m1",o/,*LL#sFbW
%>5K\BMEeeA<CCaB<r0bf[$kelQfkoId`=/S@:XA$I,)qTZ&]i->kT6u[CCS>0X`r>DO=Y1gb"0Em5MMBl,D>(_t[t5]OQD)a?FEj
%BnC`b"QN&10Z(3,5Al3I`#gqVhQsNU).X_a)^a6`7D@5!HYZ'!a"7,EML<;qj*#L]1i't@AXpHAP.tY$]sX$<A"^O8;/BjI$2qBM
%7cAaMAE-)T\C"mrqnm$8B$A:)2f2b@2Vfe*)ogVco?oKPiOBY@(iduT5AJ4&/Gu^qB1gX.9tA%1kH)2%V1C33L.[1Z!uPTNCjFYM
%iD<DB`p?@(P-;F<2p42hTJTBU^q42e7B#GrO%.g"P7reUWjZK(2^/Vj(aMhH96b4<[=J[>i#8=TDsh4.&EdWO6th`C:K#RP@MiUZ
%!J]5XQj@Pl"pL._n'\Y*C;mEhTHt'>$T:,u:CWa01SuEg6N,6P,)=Q*-l!84<AS/"?1UsRnO!Kr"6B&1M_b6T2V+@0=1*Yi`W_t6
%n]K%@+T*,S"q&pj?YCQb:C&F96+1&$K9eiB1EU^M>fI?,%^%i-YQ_D/Pt6!PCYN_Z`3rj^dOll3p'JKIA*odE!2]\qgcjY8#]cOq
%-X-5(?6X@Y>^YaE@?<R"l&c/rEmJ??7Je(Cfd;hrX%3fmC^'W,NYBRUXYNB&"2hr`UIH%sm]))82Gi)T0g1DNWkuqJV<PGtUloBp
%#`K,7VPW"Wa>Q1s0")X0<_kIDA:TJd2t^\F;qWng+rXSF;N$eOQDcSXVj:c%(1F#P@F:MiKOtI$,4]Pfngn[D=Kk?p@WmhHW=D34
%UAZ'[BT4Ot*l`\L#(djf(`ekMb;KqFp&Y;;:POWj"q`tT0gB*,Eh@`f%ogh0Ca*HX?Tmg._]p!72(=*LSA6**<PtQ\1Dh2RX/(@A
%<IG:c"GsbuZ7Xsb`TK[rJW=FIYo\^_R1"48fE-j_S0*QR2\[X>)SYF2K]9r)R8u,%XIS%<RSYh$5^B66`=SfuW5s@rm6JpWn5:Q:
%7qQ'B[?3'p?L*ur)f_r5Yr$V-?WQQb;V?YH(1&g`<\g-EX@ZW4d<6.u0,($^7+)5h#N+j?Kh_kT:,R'0A^CZjK=hW1jAkR#.NT2R
%`a:bdQ,?!p(Q$H!4q,YGfOgm?SHP:917:qiBm5u61XXGm4<'"?=Ns>-3pN'Rna6"&&Q'oH^Vrt;:5h`PR0nZk'eAT.6FcbW-RrBh
%\1KeAb9"20:/Y<IaXVC\("W&j$J1?B6<\*l?A5m-Ht2kMjGShaV!Vj(BhM5K+M$4Io#/Um48#?D^?@\$RVCR$8\gP'/kf%c'Rl2+
%)uJ\'opa-KqK@TCAEF$c(;:,bS-h!C[0srRnkRQ;$)FMlE*[R:,UY$\/jPRD;1^'/p!gI8!IF6K`4.4t74*rB_QgG2XI2$(CBm\I
%#<#0o,+;6Ug7u%i#Z$g7/(h'W-US.:+(=EqXKnW@ABl79F6GMe"`(L"Frlco+YYMQa)8-s,[D!4a>ls1L6H;UUtj!QUb%VQ\JWSQ
%^"s`r&bnI&^VFn/g.'\":7/E`I`OEo?X<.IF.IRPm:Eni6,+3Ke8^ngD0;>>!cp//*R:_7!ltbWW+%R'2>N+pMR0%%JKET+QoQ<*
%Q/eu"OP6%Gfk%ZSg?9[Ji[X2$8pE[S?$G\o5LA0=e1q+gZ-AL>j^Obe^1Ep>dBeO=nC^854L*<7?gT\D2_;@;E+5jcHEu+P:@'jR
%=,Td;^1FXEkeq3lpggi7SQKe+n\oYbI*6iB&"W)H_']W9RX2F$!)K[UM<^BIB15U^>XqSuS4<0\bm?SgF$OYIFIK`VS'Kru<N#)2
%Z0MBs/N]Z8Ccbk`BC!k$Z[JabiaUjI^=mfumoXl/RBrGCgSleYE`;p9_fj5_e#^)ko@_(]R+8,'h6HjagYK151kG'CO.)uUXM;6:
%kb`MGi1$%*p>S0B+@kJVK@Z\iR61,8>'e@9Zq]J59rO5aXMX_6]mJ>(NS4j=n?QZ`D]ui5c(8ain#k>&X[Lp2mb!A"&%=+/?XgQq
%f33S%6f,b)'R7ZE1bmgk+#,`6/]bX0I,'HUa]hfA/XSVCV!/U9[j6Hk\%Sb(WO6ceU6J@?fTb+&mT>a_`pVKEIr>jGW.]L'ifDh[
%`BSB/JcR2%71RZuq1EDC_]f_+g.o^Drb<Qr:]OahmIWdL-O(3X,&h].BPkIc0k+#7@0$$Yqua^^9.i@N[<nRKVgkJ'cY[:@V!Ge;
%7Yh(0c2<75n&k)!%tHMOAW(Jm"S6Nh3B8=b]Jg(WY7$rOgIKum_?-`!K$T#-+%]stT0\7KU\]QuX_fXOOus05We(=D24hkjI3*hN
%9,192)C0V20h2M+Z^JEG?op`s0oXp,s+UjiJAaDddQU2#jb35@s-]38k1A+)I"mRI8D@?L/%8qeh^(UqUEKXh/4>e'bVII[Vg]EQ
%%MB*.cOQ3R_&#Builn(HcO.1WMpB:H5^rb8P%Y?53>fq;6.U!&%h<nX!_Ke7Ip%l:'pTSPGu_j;qrj9qKjKLs%1JaL;it*<W7"+P
%h%@piUjI=/n?Yr-p&RGnmI/cT^se6`T-&ca'u3W+CicKM$A?7If]U=3N;=cn[Co>?VDt8upd<]a`4hBE$gtQ<2tfhde$[Z),lIbQ
%A1h?Q\&TRCf!,1j73'.I"/@OrSW9lo`7>.-+6:uq6Mg=bbV0:?AN;(H@*i$r^]O[Y@0q[r!X\F.gQ35n:"K[Jc]Hh6<C,Qf&-q3I
%(A$N$/S=&u^_h]F$.f7r'u`8P?Pa^j_:"9Y#ksfr5/-p?g1Qer#@'u2:"U&fXqaCK&"o7Q7tdlM8=8,a6_G\VDGpBpX'?Uk^'D#"
%$=npd*5!\a>5pnU&9l&N\a&M>B1n`QKmRA4_u:-VH$?OGN\RR:!9PZkXVbq8LgV,Z+9u2e&G'lA<K:.3"4F4s^s<0her@EG#s_(*
%"UOf4+Ef?ujMJjK&[S!O>u3Z8p+pYrE7;gdPJbalba9l.XG10l1.qSq-.g;ahgVthhC4+k3PmkpRF^scCd2-om?_eFa(6V617Z\T
%qi#H&&Ao.JW\=[ga8qt>qH#F1a?^2AdHIcSNt.*4)TUBM=EMkPP;72Ks6Hk<Pn2!as5h9rC8aY6\;UfOpfG/S'#h]flD`kFJi69C
%JQ697Q;.3#MF:2pdc:\a(3_ioBh3N[VXG(S_W$,1\,R#Kbg`Kr@FG<(AK;>phVgeOK*`<%"5BnF^9*cc\0r9VFhnpRs$k_G%Dlc4
%Z=\iGiJ0D5ZRV`P\cYBhG$(nW<L;bLE53#gBY>r>H!(Sc_Mr2nCe[TXB'>2@0gu^`FsnP,q9T_$'AnCmZMuK83Y#/tH!)8V!GU7A
%p-9B55dFB%.6*dtd823DZkd!l'-GJ7Kg/7F5RER^rs7`V8,R,+1gU"I6FBXJ8?^l.)A.grkft#2+Lc#E&k0*gL;Ma[G$:iQTgij3
%n57+?Pl;e72mF>@(q5=ANJ83R;fJb`V\t#^03gYKIW*;c>a.@p^#=0NY`rLJE.n6d^+PPY+o'lH)hjQ!,&BkLNY4TOp$h6LgKMjg
%@l5d"D<Nkp/\g=t40HdL5LX+n$Y&(>Zn3!AMQ_b8m.Zl7RL'GgEscQun8BdA0.KE38\pCZ5[$%q$[]$h%K,P2S:d3O7K7Ea05-:Q
%=k-oJ(>clKWCtVBW'^RVMh_JU6gh4aBgsq_q#&$fTag:)(t>aD++d9<Wj^HU1*UQ`gu_G;@3d9'ia&kP<nobJMVJ!J$c01Ifp$eM
%]0ZgM@0qA(C82mlNXGr"gRmo]pE+GL#486!fjtA@]+<'O&7,TL\cSS/4s6s@5\mgQReJef<g9S32H7*7Ee2)Xn>j(>E:NG0W,$fU
%=muUr>"W$VeZ%rACj2OhMnL^AX<4n,O\=FXIL0fFVGJ1SCD_tdqa\NcP&Zr#m>#q&_7ki."1RCnHBEOnkN_QSZLeS@:pAJUZ?@aH
%)S)JD^N;KX#!.";"4G@?\$B[#h$qVK2(:4R*^4%;fsngm/+GbMI;'U9`hHe$q'>Kk*-h1dm/pApE\)KP3Da"#d,R&_kXjU`1eFc#
%kjg54&TXQK>V(cYF$N$K<##cYQs>^u66kb'65kKtc:V,ZS\B.Gm)+m$'<BBfinh(.;o0Vl;nh$tlT3`Gf*8tFR73Ilb)l7K]Ri=W
%JqaP(D@O6QaAb=3g7I17_B3S>nB@73"UBr?j'IV&?Dp7ZJIRF4Ck";+[opgBiu3dc[kQ?5]U$8Q;3.c\VK-9h`)0oc!.c>n0H(N!
%FbSP,-71oQU+[X6_M:Z4k`\:?/7QuL7RmqI%l86+=ZFo4I0@Ji0\UIr;+QFu"C'NR!Q@<<J`dMTcEl6[C*j:G4S,h>4Wu[aJ5P08
%o<H=Nd_EpirYC'_[4$+$g(Y>+.lT/_l%Yp;(.E.p&m2j'#*ILH$:qLLA?=]?ZD&Ch%C"8:D&S4@6-;ebmF3iD\p!A.3>R(ULc)]5
%h,"ts3//PVXF`uG)!Y=`44J+P2hIEH<K)&(4*m]6d.@;kMQME]"WFF9R1&rO!fKrBRt4'Sp'>c8D3_>IZO...\Ot2d8ir9u>6/[$
%CXARRJLq2AE8.VNn:B,M$Q1dAfNnl@J.;5e\=Y+TP0]*rBhArW),'re-1CCEkcf#\+9Jn!Vob`[<Wc,2lsV;LB7L33*'gmK!%jlD
%4[OQPN@9CoRj(6%A;5/Y!&YR9q,K,G>!9^X`.85\CiWX+f]ui*@c(42>CtRMP7Xnd"_T`7T6B2+$?_;,TjX4E)1[&k9k)b7Zid"7
%0Jcbj]7M@uZR3B,&fEhaIg]0=n`h%1>nIhSY1fn/H4c32Yd*__T_*[F.]@4oEBR2F=kkAMM&XXog\=d%bA_g$L!.XUYl7@CB9R-4
%Xg"7S"Jr0M/l$HlX-&Cr5*X#`8$:<mKNj#a3[@14&g.93fbk\++)hOU`:$CZCsJu83+\R-pjl!3+p*1s<?cHZ/<:Cl*7r0]#4@-B
%nU:>H:g[eeT,+iB0>kb]>KMKA#@\+\kS,6i9/.6h`e72i<L5:1<5]Um9d7<,DB<mJ70\uV?6FIq7'S`aOlDQ?DMlF2_8'@X7ea4_
%rU:^8oV2acP,",a5*1nI_a7,-T"M9F>(Kb1Hr0g"lZd(U\fiT4jn,+c_.4[Zl=->4J]+I_o-5$@.0q9`R,A/c4u(C3CikZl:/=;?
%54h+5kN7<\Fn9#2GUb:%qe;<FR,(+ioMi=47qV\G@CL]*kG=fF#n1$tG[)phFDU8bZO'/mBSi]CD-WgTM3Q'5rJMJIG!i"@j?ljh
%`;O#:EY1Vg"jNn[0V5VD:.1H9G;,'h<BD(KQeb4Q/&+(3.8;tNkf'Uj=``O#?P^>n5(k82Y(3$D%W",+SaW)JI&Q)C9F4i1OYiWu
%D'_0]Y2H(l.</q^8Q>b15r)Qq/s1u+)A$63YjE`C"7^E=fTg?jh`OE&)^5hI3i@?,,h2!m0]Xc`P6ACrhXUcsG8b[PdT'%=N$0NP
%/ZKXLRaW6[AA$QC?W)p"W[Ch`8i``B\X!fm3t^cLe-Z$9oQb[bT<F`=hd/=Fm/=?@$;X_6nCdYPrKsa\L/6DtX(Sku!)M0CK4c^6
%_7/%EQ_/_721>;bc[$8fF6cb=Q>.L@HRGGh1Z5U)-N(I++HH?"%Ae!H2pBA?/$>/O^ZJ_YqlB-(6h?fGKm^[]m/>DJj4o8Z(,O7C
%]RU%fD`SJ/SI`+YQ&N6;O8UChn*2,r^Xf3].;+MASfe+Q??dD-MJ]+bS!:3%CoIZDZrmEUl(_DFf4lDbnSrL'BV0^^O#nq&aFK`l
%Q:Y=pN3io->Q7c=Z6YKC`of\5"\+2YC)<5th?81a`%9\EEjZ^(>k1]-7IYJt'q]K`hbA:HH.]aIDA2l)1H47?YDV*bmNjT/03mL&
%o+BFskQ[]5hcdm"C^E,,6JMk<QH:`P:'[nG"g?"C[kF@'?(JSEH=`>?:3WP<H60D/]"!X;]+pp8Ml19E4e)EYE65$9"5N:Mfr9lV
%#S-sLEPg;"[m#0WR_0#P_b.WNC_>NkT<Y)Zob^*GeO0WE_bpsYh!nb`U,'S"9QI\3@C5C;U!807X,$<u&1sMh-=-RTJUZ?jk$rQ,
%V8'NnM\C?=@P5+hDO)p*>3A0%meGENYnaA=5"ggj(V7]ZHm9Fjf/u19kp[A]3U:8Mq&U%Xl7-+edi;H0<u2+V0@;gdX8Ug2s5U_^
%LEF."lhKW/_M<Kp</KUtW=m`*0dcRBDV*Y%q--"@p&L''2rm+DR_W_EHtpL'8`Ih&f(uqZrnD"VrfL?AD)-I8qLRh[g<I!4]PlH.
%6_Z#eLNngk[d5!5Cnt>5AW6GWEm%U%gYrFpe@3r6IP@#m2?q?B:n85ngBO8cmH2O?RC9qq["GA+r#)2&.(4a(?%9M0X7B_>f4%UK
%#ar^_49=@V2!O<"p7l6R[WChG)a*=XW7N20IG=dDr<`00Dcra3ha$Q9lXF!FQuYId\%2Q)n5<$;'kON&V/c5:m>cCC8QWXW?RT3O
%C*WZ5(=Brp[B.$Zo[OH'VK&G7qB\MKN>(rIQ'i9s&YppIDV9tciOK6m)]8nQren1B(S>JM5?FN8hV^V!f3@Chq"Ng`[,:l3InN$)
%o:Q'Unb`@\o3]4\D8;M<rqeqZr'12Oqu?VmTE"KJ?iBMu^]0@eT76h'5N=7Ys*OX8T)SMOTE"b;rp;@'5Q18)rS.>UJjN[m044_S
%?iKApJ+`gB;QV^-~>
%AI9_PrivateDataEnd
